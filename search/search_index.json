{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"MVHS Workshop: Python f\u00fcr Automatisierungs- und Scripting-Aufgaben","text":"<p>Auf dieser Site habe ich meine Daten zum Kurs  MVHS Workshop: Python f\u00fcr Automatisierungs- und Scripting-Aufgaben  abgelegt.</p> <p></p>"},{"location":"info.html","title":"Info","text":"<p>Infos \u00fcber diese Site.</p>"},{"location":"python.html","title":"Python","text":"<p>Infos zu verschiedenen Python Themen.</p>"},{"location":"workshop.html","title":"Workshop","text":""},{"location":"workshop.html#kursdaten","title":"Kursdaten","text":"Kurs MVHS Workshop: Python f\u00fcr Automatisierungs- und Scripting-Aufgaben Dozentin Dr. Florence Maurice"},{"location":"workshop.html#beschreibung","title":"Beschreibung","text":"<p>Vertiefen Sie Ihr Python-Wissen und wenden Sie diese F\u00e4higkeiten in praktischen kleine Projekten an. In diesem Kurs lernen Sie, wie Sie Python gezielt f\u00fcr Automatisierung und Scripting nutzen k\u00f6nnen. Sie entdecken, wie man allt\u00e4gliche Aufgaben wie das Verwalten von Dateien, das Extrahieren von Webdaten oder das Verarbeiten von CSV-Dateien effizient automatisiert.</p>"},{"location":"workshop.html#kursinhalte","title":"Kursinhalte","text":"<ul> <li>Dateimanipulation (Kopieren, Verschieben, Umbenennen)</li> <li>Ordnerstrukturen automatisieren</li> <li>Web-Scraping mit requests und BeautifulSoup</li> <li>Extraktion von Webdaten</li> <li>CSV-Dateien automatisiert bearbeiten</li> </ul> <p>Voraussetzung: Kenntnisse entsprechend dem MVHS Kurs \"Programmierung mit Python: Grundlagen\".</p>"},{"location":"workshop.html#kurstermine","title":"Kurstermine","text":"<ul> <li>Donnerstag 03.07.2025 18:00 \u2013 21:00 Uhr</li> <li>Donnerstag 10.07.2025 18:00 \u2013 21:00 Uhr</li> <li>Donnerstag 17.07.2025 18:00 \u2013 21:00 Uhr</li> </ul>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/2025/05/20/3-auflage-automate-the-boring-stuff-with-python.html","title":"3. Auflage: Automate the Boring Stuff with Python","text":"<p>Die dritte Auflage ist gerade erschienen: Automate the Boring Stuff with Python, 3rd Edition.  Man kann das Buch auch kostenlos  online  lesen.</p>"},{"location":"blog/2025/04/23/erste-version-zum-workshop-online.html","title":"Erste Version zum Workshop online","text":"<p>Die erste Version meiner Website zum MVHS Workshop ist jetzt online.</p> <p>Als Vorbereitung auf den MVHS Workshop habe ich mir diese Site angelegt. Hier werde ich  meine Beispiele ablegen und Links zum Thema sammeln. </p>"},{"location":"blog/2025/07/04/meine-beispiele-vom-tag-1.html","title":"Meine Beispiele vom Tag 1","text":"<p>Ich habe meine Beispiele vom ersten Kurstag committet.</p>"},{"location":"info/about.html","title":"\u00dcber diese Site","text":"<p>Auf dieser Site habe ich meine Daten zum  MVHS Workshop: Python f\u00fcr Automatisierungs- und Scripting-Aufgaben  abgelegt.</p> <p>Der gesamte Inhalt dieser Site ist in meinem GitHub Repository maroph/mvhs_python_automatisierung_scripting abgelegt.</p>"},{"location":"info/about.html#struktur-des-repositories","title":"Struktur des Repositories","text":"<p>Im Branch  main  des Repositories befinden sich die folgenden Dateien und Verzeichnisse:</p> <ul> <li>.github/workflows/ci.yml   GitHub Actions Konfigurationsdatei.   Diese Konfigurationsdatei sorgt daf\u00fcr, dass bei   jedem commit im Branch main, der den Inhalt der   Webseiten betrifft, die HTML Seiten neu erzeugt   werden.</li> <li>docs   Markdown Sourcen dieser Site</li> <li>sources   Python Source Code</li> <li>LICENSE   Lizenz des Repositories (CC-BY 4.0)</li> <li>README.md   Readme Datei des Repositories</li> <li>build.bash   Linux build Skript.   Mit diesem Skript kann man lokal die HTML Seiten   auf einem Linux System erzeugen.</li> <li>mkdocs.yml MkDocs    Konfigurationsdatei</li> </ul> <p>\u00c4nderungen/Erweiterungen committe ich zuerst im  Branch  develop. Abschlie\u00dfend merge ich das Ergebnis in den main Branch.</p>"},{"location":"info/about.html#webseiten","title":"Webseiten","text":"<p>Die Markdown Dateien f\u00fcr die Webseiten sind unter  docs abgelegt.</p> <p>Die Webseiten erzeuge ich aus den Markdown Dateien mit dem MkDocs  Static Site Generator und dem darauf aufbauenden  Material for MkDocs. Die erzeugten Webseiten werden im Branch  gh-pages abgelegt.</p> <p>F\u00fcr den Aufruf der ben\u00f6tigten Python Module  nutze ich ein Python Virtual Environment.</p> <p>Auf die Webseiten kann man \u00fcber die GitHub Page  maroph.github.io/mvhs_python_automatisierung_scripting zugreifen.</p>"},{"location":"info/about.html#python","title":"Python","text":""},{"location":"info/about.html#python-dateien","title":"Python Dateien","text":"<p>Die Python Dateien sind im Verzeichnis  sources des Repositories abgelegt.</p>"},{"location":"info/about.html#python-version-und-betriebssysteme","title":"Python Version und Betriebssysteme","text":"<p>Die Python Programme habe ich unter Debian 12 und Windows 11 getestet.  </p> <p>Die jeweils verwendete Python Version kann man mit dem Programm  version.py ausgeben.</p>"},{"location":"info/about.html#debian-1211","title":"Debian 12.11","text":"<pre><code>$ python3 version.py\nPython Version : 3.11.2\n---\nNode           : myhost\nSystem         : Linux\nRelease        : 5.15.167.4-microsoft-standard-WSL2\nVersion        : #1 SMP Tue Nov 5 00:21:55 UTC 2024\nMachine        : x86_64\nProcessor      : \n</code></pre>"},{"location":"info/about.html#windows-11-24h2","title":"Windows 11 24H2","text":"<pre><code>&gt; python.exe version.py\nPython Version : 3.13.2\n---\nNode      : myhost\nSystem    : Windows\nRelease   : 11\nVersion   : 10.0.26100\nMachine   : AMD64\nProcessor : AMD64 Family 25 Model 80 Stepping 0, AuthenticAMD\n</code></pre>"},{"location":"info/about.html#python-virtual-environment","title":"Python Virtual Environment","text":"<p>Zur Erzeugung der Webseiten verwende ich die  folgenden Python Module</p> <ul> <li>mkdocs-material   Das Modul mkdocs wird dabei mitinstalliert.</li> <li>mkdocs-git-revision-date-localized-plugin</li> <li>mkdocs-rss-plugin</li> </ul> <p>F\u00fcr die ben\u00f6tigten Python Module verwende ich das folgende Virtual Environment:</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\npython -m pip install --upgrade pip\npython -m pip install --upgrade setuptools\npython -m pip install --upgrade wheel\npython -m pip install mkdocs-material\npython -m pip install mkdocs-git-revision-date-localized-plugin\npython -m pip install mkdocs-rss-plugin\n</code></pre>"},{"location":"info/about.html#python-virtual-environment-erganzung-runtime","title":"Python Virtual Environment (Erg\u00e4nzung: Runtime)","text":"<p>F\u00fcr die Beispiele werden zus\u00e4tzlich die folgenden Python Module ben\u00f6tigt:</p> <ul> <li>beautifulsoup4</li> <li>lxml</li> <li>python-dateutil</li> <li>requests</li> </ul> <pre><code>python -m pip install beautifulsoup4\npython -m pip install lxml\npython -m pip install python-dateutil\npython -m pip install requests\n</code></pre> <p>F\u00fcr Testf\u00e4lle benutze ich die  pytest Module</p> <ul> <li>pytest</li> <li>pytest-order</li> </ul> <pre><code>python -m pip install pytest\npython -m pip install pytest-order\n</code></pre> <p>Sollte das Modul pip und/oder venv nicht  installiert sein, muss man das entsprechende  Package installieren.</p> <p>Auf einem Debian System geht das mit dem folgenden Kommando</p> <pre><code>sudo apt install python3-pip\nsudo apt install python3-venv\n</code></pre>"},{"location":"info/gdpr.html","title":"DSGVO","text":""},{"location":"info/gdpr.html#datenschutzerklarung-dsgvo","title":"Datenschutzerkl\u00e4rung (DSGVO)","text":"<p>Auf dieser Webseite werden keine personenbezogenen Daten erhoben, gespeichert oder verarbeitet. Es werden keine Cookies verwendet.</p>"},{"location":"info/gdpr.html#verweise-auf-dritte","title":"Verweise auf Dritte","text":"<p>Diese Website wird auf GitHub als GitHub Pages  gehostet. Die  GitHub Global Privacy Practices sind  hier  hinterlegt.</p>"},{"location":"info/license.html","title":"Lizenz","text":"<p> Der Inhalt dieser Site ist lizenziert unter einer CC-BY 4.0 - Creative Commons Namensnennung 4.0 International Lizenz.</p> <p>Eine Kurzfassung dieser Lizenz findet man unter  CC BY 4.0 Deed.</p>"},{"location":"info/sources.html","title":"Quellen","text":"<ul> <li>Das Python favicon im Verzeichnis  assets ist von der Site favicon.cc.</li> <li>Die Python Logo Datei ist eine verkleinerte Version der Datei  python-logo-only.png.  Adding a badge to your project.</li> <li>Das RSS Logo habe   ich aus der Wikipedia.</li> <li>Das Logo \"MATERIAL FOR MKDOCS\", das ich   in der README.md Datei des Repositories   verwende, habe ich im folgenden Blog Post gefunden:    Adding a badge to your project.</li> </ul>"},{"location":"python/dictionaries.html","title":"Dictionaries","text":"<p>Ein Dictionary speichert seinen Inhalt in Key/Value (Schl\u00fcssel/Wert) Paaren ab. Der Datentyp der Werte kann beliebig sein. \u00c4hnliches gilt f\u00fcr die Schl\u00fcssel, jedoch muss der Datentyp unver\u00e4nderbar sein (int, float, String, Tuple, ...). Der  Zugriff auf die Values erfolgt dabei \u00fcber den Key und nicht, wie bei Listen, \u00fcber einen Index.</p> <ul> <li>Die Datentypen f\u00fcr den Key m\u00fcssen hashable sein.</li> </ul> <p>Bis einschlie\u00dflich der Python Version 3.6 gab es  f\u00fcr die Key/Value Paare eines Dictionaries keine feste Reihenfolge. D.h.: hat man in einer for Schleife (Beispiele siehe weiter unten) \u00fcber die Keys eines Dictionaries iteriert, hing die Reihenfolge der Keys von der verwendeten Python Implementierung ab. Seit der Python Version 3.7 sind Dictionaries ordered, d.h. die Key/Value Paare werden in einer festen Reihenfolge ausgegeben. Die Reihenfolge richtet sich nach dem Zeitpunkt, zu dem sie in das Dictionary eingestellt wurden.</p>"},{"location":"python/dictionaries.html#anlegen-eines-dictionaries","title":"Anlegen eines Dictionaries","text":"<p>Man kann entweder ein leeres Dictionary anlegen</p> <pre><code>dict = {}\n## {}\n\noder\n\nd = dict()\n## {}\n</code></pre> <p>oder das Dictionary mit Inhalt anlegen</p> <pre><code>dict = {\n    \"key1\": \"val1\",\n    \"key2\": \"val2\"\n}\n## {'key1': 'val1', 'key2': 'val2'}\n</code></pre>"},{"location":"python/dictionaries.html#zugriff-auf-einen-wert-im-dictionary","title":"Zugriff auf einen Wert im Dictionary","text":"<p>Auf die Werte im Dictionary wird mit dem Schl\u00fcssel zugegriffen:</p> <pre><code>value = dict[key]\n\nvalue = dict[\"key1\"]\n## val1\n</code></pre> <p>Greift man auf einen Key zu, den es im Dictionary nicht gibt, wird ein KeyError geworfen. </p>"},{"location":"python/dictionaries.html#zugriff-auf-einen-wert-im-dictionary-auch-wenn-der-key-nicht-existiert","title":"Zugriff auf einen Wert im Dictionary - auch wenn der Key nicht existiert","text":"<pre><code>value = dict.get(key)\n</code></pre> <p>Ist der Key nicht im Dictionary, wird None zur\u00fcckgegeben.</p> <pre><code>value = dict.get(key, default_value)\n</code></pre> <p>Ist der Key nicht im Dictionary, wird der angegebene Defaultwert zur\u00fcckgegeben.</p>"},{"location":"python/dictionaries.html#default-dictionary","title":"Default Dictionary","text":"<p>Statt jedes Mal beim Aufruf von get einen Defaultwert mitzu\u00fcbergeben, kann man auch die Klasse  defaultdict verwenden.</p> <pre><code>from collections import defaultdict\n\ndef default_value():\n    return 0\n\ndict = {}\nd = defaultdict(default_value, dict)\nvalue = d.get(key)\n</code></pre> <p>Wir jetzt beim Aufruf von get ein Key verwendet, der nicht im Dictionary abgelegt ist, wird der Wert, den die Funktion default_value zur\u00fcckgibt (im Beispiel 0) zur\u00fcckgegeben.</p>"},{"location":"python/dictionaries.html#ein-keyvalue-paar-zum-dictionary-hinzufugen","title":"Ein Key/Value Paar zum Dictionary hinzuf\u00fcgen:","text":"<pre><code>dict[key] = value\n\ndict[\"key3\"] = \"val3\"\ndict\n## {'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}\n</code></pre>"},{"location":"python/dictionaries.html#ein-keyvalue-paar-auf-einem-dictionary-loschen","title":"Ein Key/Value Paar auf einem Dictionary l\u00f6schen","text":"<pre><code>del(dict[key])\noder \ndel dict[key]\n\ndel dict[\"key3\"]\ndict\n## {'key1': 'val1', 'key2': 'val2'}\n</code></pre> <p>Wird ein Key verwendet, des es im Dictionary nicht gibt, wird ein KeyError geworfen.</p>"},{"location":"python/dictionaries.html#loschen-und-lesen","title":"L\u00f6schen und lesen","text":"<pre><code>value = dict.pop(key)\n\nvalue = dict.pop(\"key2\")\n## val2\ndict\n## {'key1': 'val1'}\n</code></pre> <p>Greift man auf einen Key zu, den es im Dictionary nicht gibt, wird ein KeyError geworfen. </p> <p>Man kann abeim Auruf auch einen Defaultwert angeben, der zur\u00fcckgegeben wird, wenn der Key im Dictionary nicht gefunden wird</p> <pre><code>value = dict.pop(key, default_value)\n\nvalue = dict.pop(\"key42\", \"Don't Panic!\")\n## Don't Panic!\n</code></pre>"},{"location":"python/dictionaries.html#anzahl-der-keyvalue-paare-in-einem-dictionary","title":"Anzahl der Key/Value Paare in einem Dictionary","text":"<pre><code>len(dict)\n\ndict = { \"key1\": \"val1\", \"key2\": \"val2\" }\n## {'key1': 'val1', 'key2': 'val2'}\nlen(dict)\n## 2\n</code></pre>"},{"location":"python/dictionaries.html#abfragen-ob-ein-key-in-einem-dictionary-enthalten-ist","title":"Abfragen ob ein Key in einem Dictionary enthalten ist","text":"<pre><code>key1 in dict\n\nif \"key1\" in dict:\n    print(\"gefunden, Wert: \", dict[\"key1\"])\n</code></pre>"},{"location":"python/dictionaries.html#abfragen-ob-ein-key-nicht-in-einem-dictionary-enthalten-ist","title":"Abfragen ob ein Key nicht in einem Dictionary enthalten ist","text":"<pre><code>key1 not in dict\n\nif \"key1\" not in dict:\n    print(\"nicht gefunden\")\n</code></pre>"},{"location":"python/dictionaries.html#alle-keys-aus-einem-dictionary-lesen","title":"Alle Keys aus einem Dictionary lesen","text":"<pre><code>for key in dict:\n    print(key)\n</code></pre> <p>Oder</p> <pre><code>for key in dict.keys():\n    print(key)\n</code></pre>"},{"location":"python/dictionaries.html#alle-keys-aus-einem-dictionary-als-enumeration-lesen","title":"Alle Keys aus einem Dictionary als Enumeration lesen","text":"<pre><code>dict\n## {'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}\n\nlist(enumerate(dict))\n## [(0, 'key1'), (1, 'key2'), (2, 'key3')]  [(0, 'key1'), (1, 'key2'), (2, 'key3')]\n\nfor count, key in enumerate(dict):\n    print(f\"count: {count} , key: {key}\")\n\nAusgabe:\ncount: 0 , key: key1\ncount: 1 , key: key2\ncount: 2 , key: key3\n</code></pre> <p>Sieh auch: enumerate in der Python Dokumentation.</p>"},{"location":"python/dictionaries.html#alle-keys-in-einer-liste-speichern","title":"Alle Keys in einer Liste speichern","text":"<pre><code>liste = list(dict.keys())\n</code></pre>"},{"location":"python/dictionaries.html#abfragen-ob-ein-wert-in-einem-dictionary-enthalten-ist","title":"Abfragen ob ein Wert in einem Dictionary enthalten ist","text":"<pre><code>value in dict.values()\n\nif \"val1\" in dict.values():\n    print(\"gefunden\")\n</code></pre>"},{"location":"python/dictionaries.html#abfragen-ob-ein-wert-nicht-in-einem-dictionary-enthalten-ist","title":"Abfragen ob ein Wert nicht in einem Dictionary enthalten ist","text":"<pre><code>value not in dict.values()\n\nif \"val1\" not in dict.values():\n    print(\"nicht gefunden\")\n</code></pre>"},{"location":"python/dictionaries.html#alle-values-aus-einem-dictionary-lesen","title":"Alle Values aus einem Dictionary lesen","text":"<pre><code>for key in dict:\n    print(dict[key])\n</code></pre> <p>Oder </p> <pre><code>for value in dict.values():\n    print(value)\n</code></pre>"},{"location":"python/dictionaries.html#alle-values-in-einer-liste-speichern","title":"Alle Values in einer Liste speichern","text":"<pre><code>liste = list(dict.values())\n</code></pre>"},{"location":"python/dictionaries.html#alle-keyvalue-paare-aus-einem-dictionary-lesen","title":"Alle Key/Value Paare aus einem Dictionary lesen","text":""},{"location":"python/dictionaries.html#jedes-paar-als-tuple","title":"Jedes Paar als Tuple","text":"<pre><code>for item in dict.items():\n    print(item[0], item[1])\n</code></pre>"},{"location":"python/dictionaries.html#alles-paare-in-einer-liste-speichern","title":"Alles Paare in einer Liste speichern","text":"<pre><code>liste = list(dict.items())\n</code></pre>"},{"location":"python/dictionaries.html#jedes-paar-als-einzelne-werte-key-value","title":"Jedes Paar als einzelne Werte: key, value","text":"<pre><code>for key, value in dict.items():\n    print(key, value)\n</code></pre>"},{"location":"python/dictionaries.html#alle-keyvalue-paare-aus-einem-dictionary-als-enumeration-lesen","title":"Alle Key/Value Paare aus einem Dictionary als Enumeration lesen","text":"<pre><code>dict\n## {'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}\n\nfor count, (key, value) in enumerate(dict.items()):\n    print(f\"count: {count} , key: {key} , value: {value}\")\n\n\nAusgabe:\ncount: 0 , key: key1 , value: val1\ncount: 1 , key: key2 , value: val2\ncount: 2 , key: key3 , value: val3\n</code></pre> <p>Sieh auch: enumerate in der Python Dokumentation.</p>"},{"location":"python/dictionaries.html#inhalt-eines-dictionaries-loschen","title":"Inhalt eines Dictionaries l\u00f6schen","text":"<pre><code>dict.clear()\n</code></pre>"},{"location":"python/dictionaries.html#dictionary-kopieren","title":"Dictionary kopieren","text":"<pre><code>dict_copy = dict.copy()\n</code></pre> <p>Achtung: es wird eine sogenannte shallow copy erzeugt!</p> <p>D.h.: es werden die einzelnen Werte (Objekte) kopiert - genauer gesagt: es werden die Referenzen auf die Objekte kopiert. Ist ein Objekt mutable (ver\u00e4nderbar - z.B. eine Liste), dann f\u00fchrt eine \u00c4nderung an so einem Wert zu einer \u00c4nderungen im Original und in der Kopie. Sind alle Werte im Dictionary immutable (unver\u00e4nderbar), dann reicht diese Art der Kopie aus.</p> <p>Eine vollst\u00e4ndige Kopie kann man mit der Funktion deepcopy erzeugen Aufruf</p> <pre><code>import copy\ndict_copy = copy.deepcopy(dict)\n</code></pre>"},{"location":"python/dictionaries.html#einfugen-eines-dictionaries","title":"Einf\u00fcgen eines Dictionaries","text":"<pre><code>dict.update(dict2)\n</code></pre> <p>Alle Key/Value Paare aus dem Dictionary dict2 werden in das Dictionary dict eingef\u00fcgt. Ist der Key bereits in dict enthalten, wird der Wert durch den Wert aus dem Dictionary dict2 ersetzt.</p> <p>Alternativ kann man als Ergebnis auch ein neues  Dictionary anlegen:</p> <pre><code>dict_merge = { **dict1, **dict2 }\n</code></pre>"},{"location":"python/dictionaries.html#funktionen-als-werte-in-einem-dictionary","title":"Funktionen als Werte in einem Dictionary","text":"<p>Da Funktionen in Python auch Objekte sind, kann man Funktionen auch als Werte in einem Dictionary verwenden.</p> <p>Ein einfaches Beispiel hierzu ist in der Source  [dict_funcs.py]{:target=\"blank\"}</p> <p>abgelegt.</p>"},{"location":"python/dictionaries.html#dictionary-comprehension","title":"Dictionary Comprehension","text":"<p>Dictionary Comprehension bietet eine verk\u00fcrzte Syntax zur Erzeugung, Transformation und Filterung von Dictionaries.</p> <p>Beispiel: Erzeuge ein Dictionary, das als Schl\u00fcssel (Key) die Werte 1 bis 10 enth\u00e4lt. Die zugeh\u00f6rigen Werte  (Values) sollen die jeweilige Zweierpotenz sein.</p> <pre><code>zweier_potenzen = {}\n\nfor n in range(1, 11):\n    zweier_potenzen[n] = 2**n\n\nzweier_potenzen\n## {1: 2, 2: 4, 3: 8, 4: 16, 5: 32, 6: 64, 7: 128, 8: 256, 9: 512, 10: 1024}\n</code></pre> <p>Beispiel: ein Dictionary enth\u00e4lt als Schl\u00fcssel englische  W\u00f6rter und als Wert die jeweilige deutsche \u00dcbersetzung.</p> <p>Nutze dieses Dictionary um einen englischen Satz Wort f\u00fcr Wort ins Deutsche zu \u00fcbersetzen. Ist ein englisches Wort nicht bekannt, wird \"???\" ausgegeben.</p> <pre><code>woerterbuch = {\n    'we':'wir',\n    'they':'sie',\n    'love':'lieben',\n    'drink':'trinken',\n    'eat':'essen',\n    'cake':'kuchen',\n    'pears':'birnen',\n    'juice':'saft'\n}\n\nsatz = \"we love cake\"\n\" \".join(list(map(lambda w: woerterbuch.get(w, \"???\"), satz.split())))\n## wir lieben kuchen\n\nsatz = \"they eat pears\"\n\" \".join(list(map(lambda w: woerterbuch.get(w, \"???\"), satz.split())))\n## sie essen birnen\n</code></pre> <p>Beispiel: Spiegel den Inhalt eines Dictionaries. D.h.: die  Schl\u00fcssel werden zu Werten und die Werte zu Schl\u00fcsseln.</p> <pre><code>d = {'a':1, 'b':2, 'c':3}\nd\n## {'a': 1, 'b': 2, 'c': 3}\nd_gespiegelt = { val:key for key,val in d.items() }\nd_gespiegelt\n## {1: 'a', 2: 'b', 3: 'c'}\n</code></pre>"},{"location":"python/dictionaries.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>Python-Kurs: Dictionaries</li> <li>Dictionaries in Python</li> <li>How to Iterate Through a Dictionary in Python</li> <li>Defaultdict in Python</li> <li>Python Dictionary Comprehensions: How and When to Use Them</li> <li>Python Dictionary Comprehensions: How and When to Use Them</li> </ul>"},{"location":"python/func_args.html","title":"Funktionsargumente","text":"<p>Oft werden in einer Funktionsdefinition alle Parameter angegeben, z.B.:</p> <pre><code>def func_sample(arg1, arg2, arg3):\n</code></pre> <p>Es gibt aber auch die M\u00f6glichkeit, eine  nicht festgelegte Anzahl von Parametern zu verwenden.</p> <p><pre><code>def func_sample(*args):\n</code></pre> Hier werden die Argumente als Tupel an die Funktion \u00fcbergeben.</p> <p><pre><code>def func_sample(**kwargs):\n</code></pre> In diesem Fall werden die Argumente als Dicitonary an die Funktion \u00fcbergeben.</p> <p>Ein Beispiel hierzu ist in der Source  func_arg_args_kwargs.py</p> <p>abgelegt.</p>"},{"location":"python/func_args.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>Python-Kurs: Funktionen</li> <li>Python Tips: args and *kwargs</li> </ul>"},{"location":"python/hashable.html","title":"Hashable","text":"<p>Die Objekte in einem Set und die Keys in einem Dictionary m\u00fcssen hashable sein. Deshalb die Frage: Was bedeutet  eigentlich hashable? </p> <p>Im  Python Glossary: hashable  findet man zum Thema Hashable den folgenden Eintrag:</p> <p>hashable An object is hashable if it has a hash value which  never changes during its lifetime (it needs a  hash() method), and can be compared to other  objects (it needs an eq() method). Hashable  objects which compare equal must have the same hash  value.</p> <p>Hashability makes an object usable as a dictionary  key and a set member, because these data structures  use the hash value internally.</p> <p>Most of Python\u2019s immutable built-in objects are  hashable; mutable containers (such as lists or  dictionaries) are not; immutable containers (such as  tuples and frozensets) are only hashable if their  elements are hashable. Objects which are instances  of user-defined classes are hashable by default. They all compare unequal (except with themselves), and their hash value is derived from their id().</p> <p>Fazit: soll eine eigene Klasse hashable sein,  m\u00fcssen die Methoden __eq__ und __hash__  geeignet implementiert werden.</p> <p>Hier eine Tabelle die zeigt, welche Python Operation  auf welche Methode einer Klasse delegiert werden:</p> Operation Dunder R\u00fcckgabewert a == b a.__eq__(b) True/False/NotImplemented hash(a) a.__hash__() int <p>Die Methode __eq__ gibt typischerweise einen von  den Werten True, False oder NotImplemented  (if objects can't be compared) zur\u00fcck. Die  Defaultimplementierung von __eq__ basiert auf dem  is Operator, der die Identity (Funktion id)  vergleicht.</p> <p>Die Defaultimplementierung von __ne__ ruft  __eq__ auf und negiert den boolschen R\u00fcckgabewert.  Hat __eq__ den R\u00fcckgabewert NotImplemented, wird  dieser auch von __ne__ zur\u00fcckgegeben.</p> <p>Bei einer eigenen Implementierung der Methoden  __eq__ und __hash__ ist folgendes zu beachten: </p> <pre><code>Ist a == b dann muss auch hash(a) == hash(b) sein\nIst hash(a) == hash(b) dann kann a == b oder a != b sein\nIst hash(a) != hash(b) dann muss auch a != b sein\n</code></pre>"},{"location":"python/hashable.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>Python Glossary: hashable</li> <li>Every dunder method in Python</li> <li>Hashing and Equality in Python</li> <li>What is \"hashable\" in Python?</li> <li>Overloading equality in Python</li> <li>Making hashable objects</li> </ul>"},{"location":"python/links.html","title":"Links","text":""},{"location":"python/links.html#python-allgemein","title":"Python Allgemein","text":"<ul> <li>Python Homepage</li> <li>Python Docs</li> <li>Python Language Reference</li> <li>Python Data model</li> <li>Python Built-in Types</li> <li>Python Built-in Functions</li> <li>Python Standard Library</li> <li>Python Styleguide</li> <li>Python Glossary</li> <li>PyPi - Python Package Index</li> <li>PIP - pip installs packages</li> <li>Python Source Code</li> <li>PyInstaller   Wandelt Python Anwendungen in ausf\u00fchrbare Programme um</li> <li>Pylint   Static code analyser for Python </li> </ul>"},{"location":"python/links.html#python-artikel","title":"Python Artikel","text":"<ul> <li>A Guide to Modern Python String Formatting Tools</li> <li>Build Your Python Project Documentation With MkDocs</li> <li>Bytes Objects: Handling Binary Data in Python</li> <li>Choose Your Path: Python\u2019s pathlib vs os.path</li> <li>Continuous Integration and Deployment for Python With GitHub Actions</li> <li>Dictionaries in Python</li> <li>Documenting Python Code: A Complete Guide</li> <li>Effective Python Testing With Pytest</li> <li>Every dunder method in Python</li> <li>For Loop vs. List Comprehension</li> <li>Garbage Collection in Python</li> <li>Getters and Setters: Manage Attributes in Python</li> <li>Getting Started With Testing in Python</li> <li>How to Join Strings in Python</li> <li>How to Replace a String in Python</li> <li>How to Remove Items From Lists in Python</li> <li>How to Round Numbers in Python</li> <li>How to Run Your Python Scripts and Code</li> <li>How to Sort Unicode Strings Alphabetically in Python</li> <li>How to Split a Python List or Iterable Into Chunks</li> <li>How to Strip Characters From a Python String</li> <li>How to Use sorted() and .sort() in Python</li> <li>How to Write Beautiful Python Code With PEP 8</li> <li>GUI Programming With PyQt</li> <li>Idiomatic Python: EAFP versus LBYL</li> <li>Image Processing With the Python Pillow Library</li> <li>Iterators and Iterables in Python: Run Efficient Iterations</li> <li>Logging in Python</li> <li>Namespaces in Python</li> <li>Object-Oriented Programming (OOP) in Python 3</li> <li>Pass by Reference in Python: Background and Best Practices</li> <li>Providing Multiple Constructors in Your Python Classes</li> <li>Primer on Python Decorators</li> <li>Python args and kwargs: Demystified</li> <li>Python Booleans: Use Truth Values in Your Code</li> <li>Python Concurrency: Threads, Processes, and asyncio Explained</li> <li>Python: create temporary files and directories in unittest</li> <li>Python Dictionary Comprehensions: How and When to Use Them</li> <li>Python Docstrings</li> <li>Python for Loops: The Pythonic Way</li> <li>Python Garbage Collection: What It Is and How It Works</li> <li>Python Set Comprehensions: How and When to Use Them</li> <li>Python's Bytearray: A Mutable Sequence of Bytes</li> <li>Python's F-String for String Interpolation and Formatting</li> <li>Python's Instance, Class, and Static Methods Demystified</li> <li>Python's Mutable vs Immutable Types: What's the Difference?</li> <li>Python's new t-strings</li> <li>Python's pathlib module</li> <li>Python's property(): Add Managed Attributes to Your Classes</li> <li>Python Scope &amp; the LEGB Rule: Resolving Names in Your Code</li> <li>Python Set Comprehensions: How and When to Use Them</li> <li>Python Stacks, Queues, and Priority Queues in Practice</li> <li>Python Timer Functions: Three Ways to Monitor Your Code</li> <li>Python while Loops: Repeating Tasks Conditionally</li> <li>regex101: regular expressions 101</li> <li>Shallow vs Deep Copying of Python Objects</li> <li>Should You Use Python pathlib or os?</li> <li>Speed Up Your Python Program With Concurrency</li> <li>The subprocess Module: Wrapping Programs With Python</li> <li>Timing Functions With Decorators</li> <li>Typangaben in Python</li> <li>Using Python's .dict to Work With Attributes</li> <li>Using Python's pip to Manage Your Projects' Dependencies</li> <li>Using the Python zip() Function for Parallel Iteration</li> <li>Variables in Python: Usage and Best Practices</li> <li>What is \"hashable\" in Python?</li> <li>What Are Python Asterisk and Slash Special Parameters For?</li> <li>When to Use a List Comprehension in Python</li> <li>Working With Files in Python</li> </ul>"},{"location":"python/links.html#tutorialsbucher","title":"Tutorials/B\u00fccher","text":"<ul> <li>Dive Into Python 3</li> <li>Python 3 Tutorial</li> <li>Python 3 - Das umfassende Handbuch</li> <li>Python-Kurs <ul> <li>Python Tutorial</li> <li>Python und OOP</li> <li>Python Fortgeschritten</li> <li>Python Anwendungen</li> <li>Numerisches Programmieren mit Python</li> <li>Maschinelles Lernen mit Python</li> <li>Python Tkinter</li> </ul> </li> <li>Python Projekte</li> <li>Python Tips</li> <li>Real Python Tutorials</li> <li>SQLite Python</li> <li>The Python Tutorial</li> <li>The Python turtle Tutorial</li> </ul>"},{"location":"python/links.html#python-kurse","title":"Python Kurse","text":"<ul> <li>edX   Interaktive Kurse von Universit\u00e4ten wie Stanford, Harvard oder Berkeley.</li> <li>Coursera    Gro\u00dfe Auswahl an Kursen, die teilweise jederzeit belegbar sind.</li> <li>CodeAcademy   Viele weiterf\u00fchrende Kurse zu Themen wie Datenanalyse oder -visualisierung    in Python.</li> <li>OpenEDG   Kurse f\u00fcr HTML/CSS, Python, C, C++ und JavaScript.</li> <li>freeCodeCamp   Gro\u00dfe Anzahl von (nicht nur Python) Kursen.</li> <li>FutureLearn   Bietet eine Reihe von Python Kursen, die in der Regel f\u00fcr Anf\u00e4nger/Einsteiger    gedacht sind.</li> <li>udemy    Tutorialreihe zu ein- und weiterf\u00fchrenden Themen an.</li> <li>w3schools   Tutorialreihe zu ein- und weiterf\u00fchrenden Themen an.</li> </ul>"},{"location":"python/links.html#aufgabensammlungen","title":"Aufgabensammlungen","text":"<ul> <li>Advent of Code   \"Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like.\"</li> <li>Project Euler   \"Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve.\"    Siehe auch     Wikipedia: Project Euler</li> </ul>"},{"location":"python/links.html#ides","title":"IDEs","text":"<ul> <li>Eclipse PyDev</li> <li>Geany</li> <li>IDLE   Teil der Python Distribution.   Siehe auch:    Getting Started With Python IDLE.</li> <li>PyCharm   Die Basisversion kann f\u00fcr private Projekte kostenlos   genutzt werden.</li> <li>Spyder</li> <li>Sublime Text 3</li> <li>Thonny</li> <li>Visual Studio Code</li> <li>VSCodium   Open Source Version von Visual Studio Code ohne    Microsoft Branding/Telemetry/Lizensierung.</li> <li>Wing Python IDE </li> </ul>"},{"location":"python/links.html#online-ides","title":"Online IDEs","text":"<ul> <li>Cloud9 IDE</li> <li>Colaboratory</li> <li>Python Code Editor</li> <li>Python Fiddle</li> <li>Python Tutor</li> <li>Programiz</li> <li>Python on repl.it</li> </ul>"},{"location":"python/links.html#weitere-links","title":"Weitere Links","text":"<p>Alle meine Links zum Thema Python lege ich in meinem Raindrop.io Account ab:</p> <ul> <li>Web: Python</li> <li>RSS: Python</li> </ul>"},{"location":"python/listen.html","title":"Listen","text":"<p>Eine Liste ist eine Sammlung von Elementen, die in einer festen Reihenfolge abgelegt werden. Der Datentyp der Elemente kann beliebig sein. Der Zugriff erfolgt  \u00fcber den Index, der die Position des Elements in der Liste bestimmt. Indizes  beginnen mit 0 und nicht mit 1!</p>"},{"location":"python/listen.html#anlegen-einer-liste","title":"Anlegen einer Liste","text":"<p>Man kann entweder ein leere Liste anlegen</p> <pre><code>liste = []\n## []\n\noder\n\nl = list()\n## []\n</code></pre> <p>oder eine Liste mit Inhalt anlegen</p> <pre><code>liste = [ \"val1\", \"val2\" ]\nliste = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\nliste = [i for i in range(1, 11)]\nliste = [ \"Don't Panic!\", 42, [ 3, 1, 4] ]\n</code></pre>"},{"location":"python/listen.html#anzahl-der-werte-in-einer-liste","title":"Anzahl der Werte in einer Liste","text":"<pre><code>len(liste)\n\nliste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlen(liste)\n## 10\n</code></pre>"},{"location":"python/listen.html#index-zugriff-auf-einen-wert-in-einer-liste","title":"Index-Zugriff auf einen Wert in einer Liste","text":"<p>Auf die Werte in einer Liste kann mit dem Index zugegriffen werden</p> <pre><code>liste = [ \"val1\", \"val2\" ]\n\nvalue1 = liste[0] # erstes Element\n## val1\nvalue2 = liste[1] # zweites Element\n## val2\n</code></pre>"},{"location":"python/listen.html#zugriff-auf-das-letztevorletzte-element-einer-liste","title":"Zugriff auf das letzte/vorletzte/... Element einer Liste","text":"<pre><code>liste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nvalue = liste[-1] # letztes Element\n## 10\nvalue = liste[-2] # vorletztes Element\n## 9\n...\n</code></pre>"},{"location":"python/listen.html#slicing","title":"Slicing","text":"<p>Man kann auch eine Liste mit einem zusammenh\u00e4ngenden Teil einer Liste erzeugen:</p> <pre><code>liste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nliste[0:5] # Elemente 0 bis 4 der Liste\n## [1, 2, 3, 4, 5]\n\nliste[6:] # Elemente 6 bis Ende\n## [7, 8, 9, 10]\n</code></pre>"},{"location":"python/listen.html#weiter-beispiele","title":"Weiter Beispiele","text":"<pre><code>liste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nliste[0]\n## 1\n\nliste[6]\n## 7\n\nliste[-1]\n## 10\n\nliste[-2]\n## 9\n\nliste[0:5]\n## [1, 2, 3, 4, 5]\n\nliste[6:]\n## [7, 8, 9, 10]\n\nliste[6:8]\n## [7, 8]\n\nliste[:2]\n## [1, 2]\n\nliste[3:-1]\n## [4, 5, 6, 7, 8, 9]\n\nliste[:-1]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>"},{"location":"python/listen.html#ein-wert-am-ende-der-liste-hinzufugen","title":"Ein Wert am Ende der Liste hinzuf\u00fcgen","text":"<pre><code>liste.append(value)\n\nliste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nliste.append(11)\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n</code></pre>"},{"location":"python/listen.html#einen-wert-in-eine-liste-einfugen","title":"Einen Wert in eine Liste einf\u00fcgen:","text":"<pre><code>liste.insert(idx, value)\n\nliste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nliste.insert(3, 42)\n## [1, 2, 3, 42, 4, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"python/listen.html#erstes-auftreten-eines-wertes-aus-einer-liste-loschen","title":"Erstes Auftreten eines Wertes aus einer Liste l\u00f6schen","text":"<pre><code>liste.remove(value)\n\nliste\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3]\nliste.remove(3)\n## [1, 2, 4, 5, 6, 7, 8, 9, 10, 3]\n</code></pre>"},{"location":"python/listen.html#ein-wert-aus-einer-liste-loschen","title":"Ein Wert aus einer Liste l\u00f6schen","text":"<pre><code>del(liste[idx])\noder \ndel liste[idx]\n\nliste\n## [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]\ndel(liste[3])\nliste\n## [1, 2, 3, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"python/listen.html#letzten-wert-lesen-und-aus-der-liste-loschen","title":"Letzten Wert lesen und aus der Liste l\u00f6schen","text":"<pre><code>value = liste.pop()\n\nliste\n## [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]\nvalue = liste.pop()\n## [1, 2, 3, 4, 5, 6, 7, 8, 9]\nvalue\n## 10\n</code></pre>"},{"location":"python/listen.html#einen-wert-lesen-und-aus-der-liste-loschen","title":"Einen Wert lesen und aus der Liste l\u00f6schen","text":"<pre><code>value = liste.pop(idx)\n\nliste\n## [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]\nvalue = liste.pop(4)\n## [1, 2, 3, 4, 6, 7, 8, 9, 10]\nvalue\n## 5\n</code></pre>"},{"location":"python/listen.html#listenelemente-an-eine-liste-anhangen","title":"Listenelemente an eine Liste anh\u00e4ngen","text":"<pre><code>liste.extend(liste2)\n\nliste1\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nliste2\n## [11, 12, 13, 14, 15]\nliste.extend(liste2)\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nliste3 = liste1 + liste2\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n</code></pre>"},{"location":"python/listen.html#wie-oft-ist-ein-wert-in-einer-liste-enthalten","title":"Wie oft ist ein Wert in einer Liste enthalten","text":"<pre><code>liste.count(wert)\n\nliste\n## [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]\nliste.count(3)\n## 2\nliste.count(42)\n## 0\n</code></pre>"},{"location":"python/listen.html#erstes-auftreten-eines-wertes-in-einer-liste","title":"Erstes Auftreten eines Wertes in einer Liste","text":"<p>Sieh auch: Python List Index() Tutorial</p> <pre><code>idx = liste.index(value)\nidx = liste.index(value, start)\nidx = liste.index(value, start, stop)\n\nstart : Index, ab dem gesucht wird\nstop  : Es wird gesucht bis vor diesem Index\n\nliste\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3]\nidx = liste.index(3)\n## 2\n</code></pre> <p>Vorsicht: Wurde der Wert nicht in der Liste gefunden, wird ein ValueError geworfen</p> <pre><code>idx = liste.index(42)\n      ^^^^^^^^^^^^^^^\nValueError: 42 is not in list\n</code></pre>"},{"location":"python/listen.html#abfragen-ob-ein-wert-in-einer-liste-enthalten-ist","title":"Abfragen, ob ein Wert in einer Liste enthalten ist","text":"<pre><code>value in liste\n\nliste\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nif 3 in liste:\n    print(\"gefunden\")\n</code></pre>"},{"location":"python/listen.html#abfragen-ob-ein-wert-nicht-in-einer-liste-enthalten-ist","title":"Abfragen, ob ein Wert nicht in einer Liste enthalten ist","text":"<pre><code>value not in liste\n\nliste\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nif 42 not in liste:\n    print(\"nicht gefunden\")\n</code></pre>"},{"location":"python/listen.html#alle-werte-aus-einer-liste-lesen","title":"Alle Werte aus einer Liste lesen","text":"<pre><code>for value in liste:\n    print(value)\n</code></pre>"},{"location":"python/listen.html#alle-werte-aus-einer-liste-als-enumeration-lesen","title":"Alle Werte aus einer Liste als Enumeration lesen","text":"<pre><code>liste\n## ['a', 'b', 'c']\n\nlist(enumerate(liste))\n## [(0, 'a'), (1, 'b'), (2, 'c')]\n\nfor count, obj in enumerate(liste):\n    print(f\"count: {count} , obj: {obj}\")\n\nAusgabe:\ncount: 0 , obj: a\ncount: 1 , obj: b\ncount: 2 , obj: c\n\nfor count, obj in enumerate(liste, start=42):\n    print(f\"count: {count} , obj: {obj}\")\n\nAusgabe:\ncount: 42 , obj: a\ncount: 43 , obj: b\ncount: 44 , obj: c\n</code></pre> <p>Sieh auch: enumerate in der Python Dokumentation.</p>"},{"location":"python/listen.html#inhalt-einer-liste-loschen","title":"Inhalt einer Liste l\u00f6schen","text":"<pre><code>liste.clear()\noder\ndel liste[:]\n</code></pre>"},{"location":"python/listen.html#umkehr-der-reihenfolge-in-einer-liste","title":"Umkehr der Reihenfolge in einer Liste","text":"<pre><code>liste.reverse()\n</code></pre>"},{"location":"python/listen.html#werte-in-einer-liste-sortieren","title":"Werte in einer Liste sortieren","text":"<pre><code>liste.sort()\n</code></pre> <p>Beim Aufruf von sort ist darauf zu achten, dass f\u00fcr alle Objekte (Werte) in der Liste das gleiche Sortierverfahren verwendet werden kann.</p> <p>Beispiel: die Liste enth\u00e4lt nur Zahlen oder nur Strings. Andernfalls wird ein TypeError geworfen:</p> <pre><code>## TypeError: \u2019&lt;\u2019 not supported between instances of \u2019str\u2019 and \u2019int\u2019\n</code></pre>"},{"location":"python/listen.html#sortierreihenfolge-umkehren","title":"Sortierreihenfolge umkehren","text":"<pre><code>liste.sort(reverse=True)\n</code></pre>"},{"location":"python/listen.html#liste-kopieren","title":"Liste kopieren","text":"<pre><code>liste2 = liste.copy()\noder\nliste2 = liste[:]\n</code></pre> <p>Achtung: es wird eine sogenannte shallow copy erzeugt!</p> <p>D.h.: es werden die einzelnen Eintr\u00e4ge (Objekte) kopiert - genauer gesagt: es werden die Referenzen auf die Objekte kopiert. Ist ein Objekt mutable (ver\u00e4nderbar - z.B. eine Liste), dann f\u00fchrt eine \u00c4nderung an so einem Wert zu einer \u00c4nderungen im Original und in der Kopie. Sind alle Werte in der Liste immutable (unver\u00e4nderbar), dann reicht diese Art der Kopie aus.</p> <p>Eine vollst\u00e4ndige Kopie kann man mit der Funktion deepcopy erzeugen Aufruf</p> <pre><code>import copy\nliste2 = copy.deepcopy(liste)\n</code></pre>"},{"location":"python/listen.html#prufen-ob-alle-listenelemente-vom-gleichen-datentyp-sind","title":"Pr\u00fcfen, ob alle Listenelemente vom gleichen Datentyp sind.","text":"<p>Im Beispiel wird gepr\u00fcft, ob alle Elemente in der Liste vom Datentyp str sind.</p> <pre><code>def is_list_of_strings(lst):\n    return lst and isinstance(lst, list) and all(isinstance(item, str) for item in lst)\n</code></pre>"},{"location":"python/listen.html#alle-werte-aus-einer-liste-lesen-und-loschen","title":"Alle Werte aus einer Liste lesen und l\u00f6schen","text":"<p>Mit dieser naheliegenden for Schleife l\u00e4sst sich das Problem leider nicht l\u00f6sen :-(</p> <pre><code>for value in liste:\n    print(value)\n    liste.pop(0)\n</code></pre> <p>Denn: es wird einerseits implizit ein Iterator benutzt, um alle Elemente der Liste  nacheinander zu bekommen und zum anderen wird direkt auf der Liste operiert.</p> <p>Man kann hierzu eine while Schleife verwenden:</p> <pre><code>while (len(liste) &gt; 0):\n    print(liste.pop(0))\n</code></pre> <p>Alternativ kann man auch die folgende for Schleife verwenden:</p> <pre><code>for _ in range(len(liste)):\n    print(liste.pop(0))\n</code></pre>"},{"location":"python/listen.html#list-comprehension","title":"List Comprehension","text":"<p>List Comprehension bietet eine verk\u00fcrzte Syntax zur Erzeugung einer neuen Liste aus Elementen einer bereits vorhandenen Liste.</p> <p>Beispiel: Berechne die Summe aller Zahlen von 1 bis 10  (inklusive). Die Funktion range liefert hier die \"Ausgangsliste\".</p> <pre><code>summe = sum(n for n in range(1,11))\n</code></pre> <p>Beispiel: Bilde eine neue Liste mit Elementen einer Liste, die den Buchstaben \"a\" enthalten.</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nnewlist = [fruit for fruit in fruits if \"a\" in fruit]\n</code></pre> <p>Beispiel: Wie oft wird die 1 gew\u00fcrfelt bei 10000 W\u00fcrfen.</p> <pre><code>import random\n\ncount = sum([ 1 for _ in range(10000) if random.randint(1, 6) == 1])\n</code></pre> <p>Beispiel: gegeben ist die Liste liste_orte mit Ortsnamen. Gesucht sind alle Orte, die mit einem \"B\" beginen und die maximal 6 Zeichen lang sind. <pre><code>liste_orte = [\n    'London', 'Berlin', 'Hamburg', 'Bonn',\n    'Budapest', 'Rom', 'Paris', 'M\u00fcnchen', \n    'New York', 'Bremen', 'Madrid', 'Beijing'\n]\n\nliste_gesuchte_orte = list(filter(lambda ort: ort[0] == \"B\" and len(ort) &lt;= 6, liste_orte))\n</code></pre></p>"},{"location":"python/listen.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>Python Documentation: More on Lists</li> <li>Python Documentation: Built-in Function sorted</li> <li>Python Documentation: Sorting Techniques</li> <li>Python-Kurs: Listen</li> <li>Python's list Data Type: A Deep Dive With Examples</li> <li>When to Use a List Comprehension in Python</li> <li>Python - List Comprehension</li> <li>List Comprehension in Python</li> <li>Python's filter(): Extract Values From Iterables</li> <li>Python's map(): Processing Iterables Without a Loop</li> </ul>"},{"location":"python/sets.html","title":"Sets - Mengen","text":"<p>Ein Set ist eine Sammlung von Objekten. Diese  Sammlung ist</p> <ul> <li>ungeordnet</li> <li>unver\u00e4nderbar   Genauer: die einzelnen Objekte in einem Set    sollten nicht ver\u00e4ndert werden. Es k\u00f6nnen aber   neue Objekte hinzugef\u00fcgt werden oder aber    bereits vorhandene Objekte gel\u00f6scht werden.</li> <li>nicht indiziert</li> <li>Die Objekte im Set m\u00fcssen hashable   sein.</li> </ul> <p>Sets werden genutzt, um mehrere Objekte ein einer Variablen abzuspeichern. Dabei werden keine Duplikate zu einem Set hinzugef\u00fcgt.</p>"},{"location":"python/sets.html#anlegen-eines-sets","title":"Anlegen eines Sets","text":"<p>Man kann entweder ein leeres Set anlegen</p> <pre><code>myset = set()\n## set()\n</code></pre> <p>oder das Set mit Inhalt anlegen</p> <pre><code>myset = { \"item1\",\"item2\", \"item3\" }\n## {'item2', 'item1', 'item3'}\n</code></pre> <p>Hinweis: * Die Werte True und 1 werden in einem Set als ein   Wert betrachtet. Kommen beide vor, wird ein Wert als   Duplikat behandelt * Die Werte False und 0 werden in einem Set als ein   Wert betrachtet. Kommen beide vor, wird ein Wert als   Duplikat behandelt</p> <p>Beispiel</p> <pre><code>myset = { 0, 1, 2, True, False }\n## {0, 1, 2}\n</code></pre>"},{"location":"python/sets.html#lange-eines-sets","title":"L\u00e4nge eines Sets","text":"<pre><code>len(myset)\n\nmyset = { 1,2,3,4,5 }\n## {1, 2, 3, 4, 5}\n\nlen(myset)\n## 5\n</code></pre>"},{"location":"python/sets.html#zugriff-auf-ein-set","title":"Zugriff auf ein Set","text":"<pre><code>myset = { 1,2,3,4,5 }\n## {1, 2, 3, 4, 5}\n</code></pre>"},{"location":"python/sets.html#zugriff-auf-alle-objekte-in-einem-set","title":"Zugriff auf alle Objekte in einem Set","text":"<pre><code>for elem in myset:\n    print(elem)\n</code></pre>"},{"location":"python/sets.html#zugriff-auf-alle-objekte-in-einem-set-als-enumeration","title":"Zugriff auf alle Objekte in einem Set als Enumeration","text":"<pre><code>myset\n## {1, 2, 3, 4, 5}\n\nfor count, obj in enumerate(myset):\n    print(f\"count: {count} , obj: {obj}\")\n\nAusgabe:\ncount: 0 , obj: 1\ncount: 1 , obj: 2\ncount: 2 , obj: 3\ncount: 3 , obj: 4\ncount: 4 , obj: 5\n</code></pre> <p>Sieh auch: enumerate in der Python Dokumentation.</p>"},{"location":"python/sets.html#objekt-ist-in-einem-set","title":"Objekt ist in einem Set","text":"<pre><code>object in myset\n\nif 1 in myset:\n    print(\"in Set gefunden\")\n</code></pre>"},{"location":"python/sets.html#objekt-ist-nicht-in-einem-set","title":"Objekt ist nicht in einem Set","text":"<pre><code>object not in myset\n\nif 42 not in myset:\n    print(\"nicht in Set gefunden\")\n</code></pre>"},{"location":"python/sets.html#objekt-zu-einem-set-hinzufugen","title":"Objekt zu einem Set hinzuf\u00fcgen","text":"<pre><code>myset.add(6)\nmyset\n## {1, 2, 3, 4, 5, 6}\n</code></pre> <p>Ist ein Objekt bereits in einem Set vorhanden, wird das Set nicht ge\u00e4ndert</p> <pre><code>myset.add(1)\nmyset\n## {1, 2, 3, 4, 5}\n</code></pre>"},{"location":"python/sets.html#ein-set-zu-einem-set-hinzufugen","title":"Ein Set zu einem Set hinzuf\u00fcgen","text":"<pre><code>set1.update(set2)\n</code></pre> <p>Bereits vorhandene Objekte werden beim Update ignoriert</p> <pre><code>set1 = { 1,2,3,4,5 }\nset2 = { 3,4,5,6,7,8 }\nset1.update(set2)\nset1\n## {1, 2, 3, 4, 5, 6, 7, 8}\n</code></pre>"},{"location":"python/sets.html#ein-objekt-aus-einem-set-loschen","title":"Ein Objekt aus einem Set l\u00f6schen","text":"<pre><code>myset.remove(objekt)\n\nmyset\n## {1, 2, 3, 4, 5}\nmyset.remove(3)\nmyset\n## {1, 2, 4, 5}\n</code></pre> <p>Wird beim Aufruf von remove ein Objekt angegeben, das nicht im Set enthalten ist, wird ein KeyError geworfen.</p> <p>Alternativ kann man die Methode discard nutzen. Diese Methode wirft keinen KeyError, wenn das  Objekt nicht im Set enthalten ist</p> <pre><code>myset\n## {1, 2, 3, 4, 5}\nmyset.discard(42)\nmyset\n## {1, 2, 3, 4, 5}\n</code></pre> <p>F\u00fcr Sets gibt es auch die Methode pop.</p> <pre><code>objekt = myset.pop()\n</code></pre> <p>Da es auf Sets keinen Index gibt, wird mit dieser  Methode ein zuf\u00e4lliges Objekt aus dem Set gel\u00f6scht.  Die Methode gibt das gel\u00f6schte Objekt zur\u00fcck.</p>"},{"location":"python/sets.html#set-leeren","title":"Set leeren","text":"<pre><code>myset.clear()\n</code></pre>"},{"location":"python/sets.html#set-loschen","title":"Set l\u00f6schen","text":"<pre><code>del myset\n</code></pre>"},{"location":"python/sets.html#set-operationen","title":"Set Operationen","text":"<p>F\u00fcr die Beispiele werden die folgenden Sets  verwendet</p> <pre><code>set1 = { 1,2,3,4,5 }\n## {1, 2, 3, 4, 5} \nset2 = { 3,4,5,6,7,8 }\n## {3, 4, 5, 6, 7, 8}\n</code></pre>"},{"location":"python/sets.html#vereinigung","title":"Vereinigung","text":"<pre><code>s1 | s2\n## {1, 2, 3, 4, 5, 6, 7, 8}\n\ns3 = s1.union(s2)\ns3\n## {1, 2, 3, 4, 5, 6, 7, 8}\n</code></pre> <p>Man kann mit union auch mehrere Sets vereinigen</p> <pre><code>myset = set1.union(set2, set3, set4)\n</code></pre>"},{"location":"python/sets.html#schnitt","title":"Schnitt","text":"<pre><code>s1 &amp; s2\n## {3, 4, 5}\n</code></pre>"},{"location":"python/sets.html#differenz","title":"Differenz","text":"<p>In s1, nicht in s2</p> <pre><code>s1 - s2\n## {1, 2}\n</code></pre> <p>In s2, nicht in s1</p> <pre><code>s2 -s1\n## {8, 6, 7}\n</code></pre>"},{"location":"python/sets.html#frozenset","title":"frozenset","text":"<p>Set Objekte sind ver\u00e4nderbar. Mit Hilfe der Funktion frozenset werden Sets \"eingefroren\" und somit unver\u00e4nderbar.</p> <pre><code>myset = { 1, 2, 3, 'A', 'B', 'C' }\n## {'A', 1, 2, 3, 'B', 'C'}\n\nmyset_frozen = frozenset(myset)\n## frozenset({'A', 1, 2, 3, 'B', 'C'})\n\ntype(myset_frozen)\n## class 'frozenset'&gt;\n</code></pre>"},{"location":"python/sets.html#set-comprehension","title":"Set Comprehension","text":"<p>Set Comprehension bietet eine verk\u00fcrzte Syntax zur Erzeugung und Manipulation von Python Sets.</p> <p>Beispiel: Ein Set enth\u00e4lt Mailadressen. Bilde ein neues Set, dass nur die Mailadressen enth\u00e4lt, die auf \".com\" enden.</p> <pre><code>emails_set = {\n    \"alice@example.org\",\n    \"bob@example.com\",\n    \"johndoe@example.com\",\n    \"charlie@example.com\",\n    \"david@example.net\",\n}\nemails_set\n## {'alice@example.org', 'david@example.net', 'charlie@example.com', 'johndoe@example.com', 'bob@example.com'}\n\nemails_com_set = {email for email in emails_set if email.endswith(\".com\")}\nemails_com_set\n## {'johndoe@example.com', 'bob@example.com', 'charlie@example.com'}\n</code></pre>"},{"location":"python/sets.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>w3schools: Python Sets</li> <li>Set Types - set, frozenset</li> <li>Hashable</li> <li>dataclasses \u2014 Data Classes</li> <li>w3schools: frozenset() Function</li> <li>Mengen managen \u00fcber: set und frozenset</li> <li>Python Set Comprehensions: How and When to Use Them</li> </ul>"},{"location":"python/sqlite.html","title":"SQLite","text":"<p>SQLite ist eine  public-domain SQL Datenbankimplementierung. Die Software ist in der Programmiersprache C geschrieben. Zur Python  Laufzeitumgebung geh\u00f6rt das Modul  sqlite3, das die Nutzung dieser Datenbank erm\u00f6glicht.</p> <p>Beispiele f\u00fcr die Nutzung der Datenbank findet man im  SQLite Tutorial.  Dort ist auch das  Python Binding f\u00fcr die SQL Aufrufe beschrieben.</p> <p>Eine \u00dcbersicht zur Funktionalit\u00e4t von SQLite findet man in dem folgenden Artikel:  Wikipedia:SQLite.</p>"},{"location":"python/sqlite.html#database-gui","title":"Database GUI","text":"<p>Als GUI f\u00fcr eine SQLite Datenbank kann man den  DB Browser for SQLite verwenden.</p>"},{"location":"python/sqlite.html#zeitstempel-datetime","title":"Zeitstempel (Datetime)","text":"<p>Zeitstempel (Datum und Uhrzeit) werden in einer SQLite Datenbank als String (Typ TEXT) oder Zahl (Typ INTEGER) in der Datenbank abgelegt. Dabei werden die folgenden Formate verwendet:</p> <p>Zeitstempel als String <pre><code>YYYY-MM-DD HH:mm:ss[.SSS]\n</code></pre></p> <p>Beispiel: <pre><code>2025-04-28 16:36:42 oder auch 2025-04-28 16:36:42:123\n</code></pre></p> <p>Zeitstempel als Zahl <pre><code>&lt;zahl: Zeit in Sekunden seit dem 01.01.1970&gt;\n</code></pre></p> <p>Beispiel: <pre><code>1745933801  - 2025-04-29 15:36:41\n</code></pre></p> <p>Mehr Details zu den unterst\u00fctzen Formaten findet man in den Kapiteln Datatypes In SQLite und  Date And Time Functions der SQLite Dokumentation.</p> <p>In Python werden Zeitstempel in einem datetime Objekt abgelegt.</p> <p>Es bleibt die Frage, wie man diese verschiedenen Formate (SQLite und Python) zusammenbringt.</p> <p>Hierf\u00fcr gibt es zwei L\u00f6sungen. F\u00fcr beide L\u00f6sungen habe ich ein kleines Python Programm geschrieben, um das jeweilige Verhalten zu demonstrieren</p> <ul> <li>logdb_sample.py   In diesem Beispiel nutze ich die automatische   Konvertierung zwischen Zeitstempel in der Datenbank   und datetime Objekt im Python Programm.</li> <li>logdb_sample2.py   In diesem Beispiel f\u00fchre ich eine manuelle    Konvertierung zwischen Zeitstempel in der Datenbank   und datetime Objekt im Python Programm aus.</li> </ul> <p>In den Beispielen wird eine Tabelle logrecords verwendet, in der Logs\u00e4tze gesammelt werden. Die Tabelle enth\u00e4lt die folgenden Felder:</p> <ul> <li>log_id   Eine eindeutige ID (Integer).</li> <li>log_level   LogLevel<ul> <li>6 : FATAL</li> <li>5 : ERROR</li> <li>4 : WARN</li> <li>3 : INFO</li> <li>2 : DEBUG</li> <li>1 : TRACE</li> </ul> </li> <li>log_dt   Zeitstempel der Erzeugung des Logsatzes.</li> <li>log_msg   Logging Message (String).</li> </ul>"},{"location":"python/sqlite.html#python-automatische-konvertierung","title":"Python: automatische Konvertierung","text":"<p>logdb_sample.py</p> <p>Beim Aufruf der Funktion  sqlite3.connect()</p> <p>kann man zus\u00e4tzlich das Argument</p> <pre><code>detect_types=sqlite3.PARSE_DECLTYPES\n</code></pre> <p>angeben. F\u00fcr die Konvertierung der Datentypen werden dann Adapter- und Konverterfunktionen verwendet.</p> <p>Eine Beschreibung hierzu findet man hier:  Adapter and converter recipes.</p> <p>Adapterfunktionen <pre><code>def adapt_date_iso(val: datetime.date) -&gt; str :\n    \"\"\"Adapt datetime.date to ISO 8601 date.\"\"\"\n    return val.isoformat()\n\ndef adapt_datetime_iso(val: datetime.datetime) -&gt; str :\n    \"\"\"Adapt datetime.datetime to timezone-naive ISO 8601 date.\"\"\"\n    return val.isoformat()\n\ndef adapt_datetime_epoch(val: datetime.datetime) -&gt; int:\n    \"\"\"Adapt datetime.datetime to Unix timestamp.\"\"\"\n    print(f\"adapt_datetime_epoch(val) : {val} : type(val) : {type(val)}\")\n    return int(val.timestamp())\n</code></pre></p> <p>Zugeh\u00f6rige Register Funktionen <pre><code>sqlite3.register_adapter(datetime.date, adapt_date_iso)\nsqlite3.register_adapter(datetime.datetime, adapt_datetime_iso)\nsqlite3.register_adapter(datetime.datetime, adapt_datetime_epoch)\n</code></pre></p> <p>Konverterfunktionen <pre><code>def convert_date(val: str) -&gt; datetime.date:\n    \"\"\"Convert ISO 8601 date to datetime.date object.\"\"\"\n    return datetime.date.fromisoformat(val.decode())\n\ndef convert_datetime(val: str) -&gt; datetime.datetime:\n    \"\"\"Convert ISO 8601 datetime to datetime.datetime object.\"\"\"\n    return datetime.datetime.fromisoformat(val.decode())\n\ndef convert_timestamp(val: int) -&gt; datetime.datetime:\n    \"\"\"Convert Unix epoch timestamp to datetime.datetime object.\"\"\"\n    return datetime.datetime.fromtimestamp(int(val))\n</code></pre></p> <p>Zugeh\u00f6rige Register Funktionen <pre><code>sqlite3.register_converter(\"date\", convert_date)\nsqlite3.register_converter(\"datetime\", convert_datetime)\nsqlite3.register_converter(\"timestamp\", convert_timestamp)\n</code></pre></p> <p>Die jeweiligen Funktionsnamen k\u00f6nnen frei gew\u00e4hlt werden und m\u00fcssen dann beim Aufruf der jeweiligen register_XXX Funktion angegeben werden.</p> <p>Bis Python 3.11 gab es Standardkonverter, die man -  ohne eigene Implementierung - nutzen konnte. Ab  Python 3.12 sind die Standardkonverter deprecated und sollten nicht mehr genutzt werden.</p> <p>Damit die Konverter aufgerufen werden, gibt man bei der Deklaration eines Zeitstempel Feldes in einer Tabelle den Typ <code>TIMESTAMP</code> statt <code>TEXT</code> oder <code>INTEGER</code> an.</p> <pre><code>CREATE TABLE IF NOT EXISTS logrecords (\n    log_id    INTEGER PRIMARY KEY AUTOINCREMENT,\n    log_level INTEGER NOT NULL,\n    log_dt    TIMESTAMP NOT NULL,\n    log_msg   TEXT NOT NULL\n)\n</code></pre>"},{"location":"python/sqlite.html#python-manuelle-konvertierung","title":"Python: manuelle Konvertierung","text":"<p>logdb_sample2.py</p> <p>F\u00fcr die Zeitstempel in der Datenbank nutze ich in diesem Fall die Formate</p> <pre><code>YYYY-MM-DD HH:mm:ss\n</code></pre> <p>und</p> <pre><code>YYYY-MM-DD HH:mm:ss.mmmmmm localtime\n</code></pre> <p>F\u00fcr die Umwandlung zwischen datetime und Zeitstempel habe ich die folgenden Funktionen geschrieben:</p> <pre><code>def dt_string_to_dt(dt_string: str) -&gt; datetime\n\ndef dt_to_dt_string(dt: datetime.datetime) -&gt; str:\n</code></pre> <p>In diesem Beispiel sind 2 F\u00e4lle programmiert:</p> <ol> <li>Verwendung der lokalen Zeit im Python Programm    und in der Datenbank.</li> <li>Verwendung der lokalen Zeit im Python Programm    und UTC Zeit in der Datenbank.</li> </ol> <pre><code>use_utc: bool = False\n</code></pre> <p>Die Tabelle in der Datenbank ist folgenderma\u00dfen deklariert:</p> <pre><code>CREATE TABLE IF NOT EXISTS logrecords (\n    log_id    INTEGER PRIMARY KEY AUTOINCREMENT,\n    log_level INTEGER NOT NULL,\n    log_dt    TEXT NOT NULL,\n    log_msg   TEXT NOT NULL\n)\n</code></pre> <pre><code>use_utc: bool = True\n</code></pre> <p>Die Tabelle in der Datenbank ist in diesem Fall  folgenderma\u00dfen deklariert:</p> <pre><code>CREATE TABLE IF NOT EXISTS logrecords (\n    log_id    INTEGER PRIMARY KEY AUTOINCREMENT,\n    log_level INTEGER NOT NULL,\n    log_dt    TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    log_msg   TEXT NOT NULL\n)\n</code></pre> <p>Die Deklaration</p> <pre><code>log_dt TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP\n</code></pre> <p>hat den Vorteil, das man beim SQL INSERT das Feld log_dt nicht mit angeben muss und es von der Datenbank dann automatisch belegt wird. Der Nachteil dieser Deklaration ist, das der Zeitstempel als UTC Zeit und nicht als lokale Zeit abgelegt wird.</p> <p>Gibt man den Zeitstempel beim SQL INSERT mal an und mal nicht, enth\u00e4lt der Zeitstempel die Zeit mal als UTC Zeit und mal als lokale Zeit. Da aber alle Zeitstempel das Format </p> <pre><code>YYYY-MM-DD HH:mm:ss\n</code></pre> <p>haben, w\u00e4re nicht mehr klar, wann der Eintrag erzeugt wurde.</p> <p>Um dieses Problem zu umgehen, verwende ich in diesem Fall f\u00fcr die Zeitstempel generell die UTC Zeit.</p>"},{"location":"python/sqlite.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>SQLite<ul> <li>Documentation </li> </ul> </li> <li>DB Browser for SQLite</li> <li>Python module sqlite3<ul> <li>Tutorial </li> </ul> </li> <li>SQLite Tutorial<ul> <li>Python Binding</li> </ul> </li> <li>Python SQLite tutorial using sqlite3</li> </ul>"},{"location":"python/tuples.html","title":"Tuples - Unver\u00e4nderliche Listen","text":"<p>Tuple verhalten sich genau wie Listen, aber ihr Inhalt kann nicht ver\u00e4ndert werden.</p>"},{"location":"python/tuples.html#anlegen-eines-tuple","title":"Anlegen eines Tuple","text":"<pre><code>tuple = (\"val1\", \"val2\")\n</code></pre>"},{"location":"python/tuples.html#leeres-tuple","title":"Leeres Tuple","text":"<pre><code>tuple = ()\n</code></pre>"},{"location":"python/tuples.html#tuple-mit-einem-element","title":"Tuple mit einem Element","text":"<pre><code>tuple = (\"val1\",)\n</code></pre>"},{"location":"python/tuples.html#zugriff-auf-einen-wert-in-einem-tuple","title":"Zugriff auf einen Wert in einem Tuple","text":"<p>Auf die Werte in einem Tuple wird mit dem Index zugegriffen:</p> <pre><code>value1 = tuple[0]\nvalue2 = tuple[1]\n</code></pre> <p>Achtung: der Index einer Liste f\u00e4ngt immer mit dem Wert 0 an.</p>"},{"location":"python/tuples.html#zugriff-auf-das-letztevorletzte-element-eines-tuple","title":"Zugriff auf das letzte/vorletzte Element eines Tuple:","text":"<pre><code>value = tuple[-1] # letztes Element\nvalue = tuple[-2] # vorletztes Element\n...\n</code></pre>"},{"location":"python/tuples.html#anzahl-der-werte-in-einem-tuple","title":"Anzahl der Werte in einem Tuple","text":"<pre><code>len(tuple)\n</code></pre>"},{"location":"python/tuples.html#abfragen-ob-ein-wert-in-einem-tuple-enthalten-ist","title":"Abfragen ob ein Wert in einem Tuple enthalten ist","text":"<pre><code>if \"val1\" in tuple:\n    print(\"gefunden\")\n</code></pre>"},{"location":"python/tuples.html#abfragen-ob-ein-wert-nicht-in-einem-tuple-enthalten-ist","title":"Abfragen ob ein Wert nicht in einem Tuple enthalten ist","text":"<pre><code>if \"val1\" not in tuple:\n    print(\"nicht gefunden\")\n</code></pre>"},{"location":"python/tuples.html#alle-werte-aus-einem-tuple-lesen","title":"Alle Werte aus einem Tuple lesen","text":"<pre><code>for value in tuple:\n    print(value)\n</code></pre> <p>Ein Tutorial zum Thema Tuple findet man hier:  Python's tuple Data Type: A Deep Dive With Examples</p>"},{"location":"workshop/links.html","title":"Links","text":""},{"location":"workshop/links.html#python","title":"Python","text":""},{"location":"workshop/links.html#python-site","title":"Python Site","text":"<ul> <li>Python Homepage</li> <li>Python Docs</li> </ul>"},{"location":"workshop/links.html#alternativer-einstiegskurs","title":"Alternativer Einstiegskurs","text":"<p>Neben dem MVHS Kurs \"Programmierung mit Python: Grundlagen\" ist, meiner Meinung nach, der  openHPI Kurs Python \u2013 schnell und intensiv Programmieren lernen ein guter Einstiegskurs f\u00fcr diesen Workshop. Dieser Kurs kann jederzeit kostenlos im Selbststudium absolviert werden.</p> <p>Hier die Folien (PDF-Datei) zu diesem Kurs.</p>"},{"location":"workshop/links.html#python-ides","title":"Python IDEs","text":"<ul> <li>PyCharm   Die Basisversion kann f\u00fcr private Projekte kostenlos   genutzt werden.</li> <li>Visual Studio Code   Dies d\u00fcrfte die am meisten genutzte IDE sein.</li> <li>VSCodium   Open Source Version von Visual Studio Code ohne    Microsoft Branding/Telemetry/Lizensierung.</li> </ul>"},{"location":"workshop/links.html#automation","title":"Automation","text":"<ul> <li>Automate the Boring Stuff with Python   Webseite zum gleichnamigen Buch.</li> <li>Faker   Faker ist ein Python Package, dass Testdaten generiert.</li> </ul>"},{"location":"workshop/links.html#aufruf-von-programmen","title":"Aufruf von Programmen","text":"<ul> <li>The subprocess Module: Wrapping Programs With Python</li> </ul>"},{"location":"workshop/links.html#beautiful-soup","title":"Beautiful Soup","text":"<ul> <li>PyPi: beautifulsoup4</li> <li>Beautiful Soup: Homepage</li> <li>PyPi: lxml</li> <li>lxml: Homepage</li> </ul>"},{"location":"workshop/links.html#csv","title":"CSV","text":"<ul> <li>Python Doc: CSV File Reading and Writing</li> <li>Guide to Python's CSV Module</li> <li>Reading and Writing CSV Files in Python</li> </ul>"},{"location":"workshop/links.html#dateien-und-verzeichnisse","title":"Dateien und Verzeichnisse","text":"<ul> <li>Python's pathlib Module: Taming the File System</li> <li>Working With Files in Python</li> </ul>"},{"location":"workshop/links.html#datenbank","title":"Datenbank","text":"<ul> <li>Introduction to Python SQL Libraries</li> </ul>"},{"location":"workshop/links.html#mariadb","title":"MariaDB","text":"<ul> <li>MariaDB<ul> <li>Python Connector Software</li> <li>Python Connector Documentation</li> <li>PyPi: mariadb</li> </ul> </li> </ul>"},{"location":"workshop/links.html#mysql","title":"MySQL","text":"<ul> <li>MySQL<ul> <li>Documentation</li> <li>Python Connector Software</li> <li>Python Connector Developer Guide</li> <li>PyPi: mysql-connector-python</li> </ul> </li> <li>Python and MySQL Database: A Practical Introduction</li> <li>Python MySQL</li> </ul>"},{"location":"workshop/links.html#oracle","title":"Oracle","text":"<ul> <li>Python Driver for Oracle Database: Documentation</li> <li>PyPi: oracledb</li> </ul>"},{"location":"workshop/links.html#sqlite","title":"SQLite","text":"<ul> <li>SQLite<ul> <li>Documentation </li> </ul> </li> <li>DB Browser for SQLite</li> <li>Python module sqlite3<ul> <li>Tutorial </li> </ul> </li> <li>SQLite Tutorial<ul> <li>Python Binding</li> </ul> </li> <li>Python SQLite tutorial using sqlite3</li> </ul>"},{"location":"workshop/links.html#requests","title":"Requests","text":"<ul> <li>PyPi: requests</li> <li>Requests</li> </ul>"},{"location":"workshop/links.html#weitere-links","title":"Weitere Links","text":"<p>Weitere Links zum Workshop und allgemein zum Thema Python habe ich in meinem Raindrop.io Account abgelegt.</p> <ul> <li>Web: Python</li> <li>RSS: Python</li> <li>Web: Workshop Automatisierung und Scripting</li> <li>RSS: Workshop Automatisierung und Scripting</li> </ul>"},{"location":"workshop/tag1.html","title":"Tag 1 (03.07.2025)","text":"<p>Das Thema des Tages war \"Arbeiten mit Dateien/Verzeichnissen\". Eine gute \u00dcbersicht zu diesem Thema gibt der Artikel  Working With Files in Python.</p>"},{"location":"workshop/tag1.html#lesen-und-schreiben-von-dateien","title":"Lesen und Schreiben von Dateien","text":""},{"location":"workshop/tag1.html#datei-offnen","title":"Datei \u00f6ffnen","text":"<p>Dateien werden mit der Funktion  open ge\u00f6ffnet.</p> <pre><code>open(&lt;datei&gt;, &lt;modus&gt;) \u2013 liefert Dateiobjekt zur\u00fcck\n\nDatei: Name der Datei\nIm selben Verzeichnis reicht der Name der Datei.\nAnsonsten muss ein relativer/absoluter Pfadname\nverwendet werden.\n\nModus:\nr  \u2013 lesen (Standard), Fehler falls Datei nicht da\na  \u2013 anh\u00e4ngen, Datei wird erstellt, falls nicht da\nw  \u2013 schreiben, Datei wird erstellt, falls nicht da\nx  \u2013 erstellen, Fehler, wenn Datei existiert\na+ - anh\u00e4ngen, schreiben und lesen, Datei wird erstellt falls nicht da\nr+ - lesen und update, Fehler, wenn Datei nicht da\nw+ \u2013 schreiben und update, Datei erstellt, falls nicht da\nF\u00fcr binary b erg\u00e4nzen\n</code></pre>"},{"location":"workshop/tag1.html#datei-lesen","title":"Datei lesen","text":"<pre><code>f = open('text.txt', 'r', encoding='utf-8')\ncontent = f.read()\nprint(content)\nf.close()\n</code></pre>"},{"location":"workshop/tag1.html#kompakter-mit-with","title":"Kompakter mit with","text":"<p><pre><code>with open('text.txt', 'r', encoding='utf-8') as f:\n    content = f.read()\nprint(content)\n</code></pre> Beispiele:  </p> <ul> <li>lesen.py</li> <li>lesen_zeilenweise</li> <li>lesen_zeilenweise_verbessert.py</li> <li>lesen_n_zeilen.py</li> <li>read_birthday_in_pi.py</li> </ul> <p>Hinweis: im Beispiel  lesen_zeilenweise_verbessert.py wird der Walrus Operator verwendet. Dieser Operator wurde mit Python 3.8 eingef\u00fchrt. Eine Beschreibung zu diesem Operator  findet man im Artikel  The Walrus Operator: Python's Assignment Expressions.</p>"},{"location":"workshop/tag1.html#datei-schreiben","title":"Datei schreiben","text":"<pre><code>with open('data.txt', 'w') as f:\n    # Datei wird erstellt, falls nicht vorhanden\n    f.write('Hello, world!')\n</code></pre> <p>Beispiel: schreiben.py</p>"},{"location":"workshop/tag1.html#module-fur-die-automatisierung","title":"Module f\u00fcr die Automatisierung","text":"<p>Ein Modul ist eine Datei, die Python Definitionen und Befehle enth\u00e4lt (z.B. Funktionen, Methoden, Konstanten, Klassen etc.).</p> <p>Die folgenden Module werden in der Automatisierung h\u00e4ufig verwendet:</p> <ul> <li>os: Arbeiten mit dem Betriebssystem (Dateien,  Verzeichnisse).</li> <li>shutil: H\u00f6here Dateimanipulation (Kopieren, Verschieben).</li> <li>pathlib: Komfortables Arbeiten mit Pfaden</li> <li>send2trash: Sicheres L\u00f6schen  </li> <li>datetime, dateutil f\u00fcr Operationen mit Datumsangaben</li> </ul> <p>Das Modul send2trash muss mit pip extra installiert werden. Die anderen Module geh\u00f6ren zur Stand Python Laufzeitumgebung.</p>"},{"location":"workshop/tag1.html#packages-installieren","title":"Packages installieren","text":"<p>Die meisten Module werden als Packages auf der Seite PyPi zur Verf\u00fcgung gestellt. Diese Packages kann man folgenderma\u00dfen auf seinem System installieren:</p> <pre><code>python -m pip install package_name\n</code></pre> <p>Beispiel send2trash:</p> <pre><code>python -m pip install send2trash\n</code></pre>"},{"location":"workshop/tag1.html#module-importieren","title":"Module importieren","text":"<p>Module m\u00fcssen vor der Nutzung mit der Anweisung import in das Skript importiert werden.</p> <p>Beispiel: <pre><code>import os\nprint(os.getcwd()) # aktuelles Arbeitsverzeichni\n from os import getcwd\n print(getcwd())  # aktuelles Arbeitsverzeichnis\n</code></pre></p> <p>Alternativ: <pre><code>from os import getcwd\nprint(getcwd())  # aktuelles Arbeitsverzeichnis\n</code></pre></p> <p>Bei der import Anweisung kann auch ein Alias  angegeben werden:</p> <pre><code>import modul as alias\n\noder\n\nfrom module import name as alias\n</code></pre> <p>Beim Zugriff wird dann der Aliasnamen verwendet.</p>"},{"location":"workshop/tag1.html#infos-uber-module-ausgeben","title":"Infos \u00fcber Module ausgeben","text":"<p>Eine einfach eHilfeseite kann man sich in der Python Shell ausgeben lassen:</p> <pre><code>python\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; help(os)\nHelp on module os:\n\nNAME\n    os - OS routines for NT or Posix depending on what system we're on.\n\nMODULE REFERENCE\n    https://docs.python.org/3.13/library/os.html\n\n    The following documentation is automatically generated from the Python\n    source files.  It may be incomplete, incorrect or include features that\n    are considered implementation detail and may vary between Python\n    implementations.  When in doubt, consult the module reference at the\n    location listed above.\n\nDESCRIPTION\n    This exports:\n      - all functions from posix or nt, e.g. unlink, stat, etc.\n      - os.path is either posixpath or ntpath\n      - os.name is either 'posix' or 'nt'\n      - os.curdir is a string representing the current directory (always '.')\n      - os.pardir is a string representing the parent directory (always '..')\n      - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n      - os.extsep is the extension separator (always '.')\n      - os.altsep is the alternate pathname separator (None or '/')\n      - os.pathsep is the component separator used in $PATH etc\n      - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n      - os.defpath is the default search path for executables\n      - os.devnull is the file path of the null device ('/dev/null', etc.)\n\n    Programs that import and use 'os' stand a better chance of being\n    portable between different platforms.  Of course, they must then\n    only use functions that are defined by all platforms (e.g., unlink\n    and opendir), and leave all pathname manipulation to os.path\n:\n</code></pre> <p>Mit dir kann man sich alle global definierten Namen (Konstanten, Funktionen) un einem Modul ausgeben lassen. <pre><code>import os\ndir(os)\n['DirEntry', 'EX_OK', 'F_OK', 'GenericAlias', 'Mapping', 'MutableMapping', 'O_APPEND', 'O_BINARY', 'O_CREAT', 'O_EXCL', 'O_NOINHERIT', 'O_RANDOM', 'O_RDONLY', 'O_RDWR', 'O_SEQUENTIAL', 'O_SHORT_LIVED', 'O_TEMPORARY', 'O_TEXT', 'O_TRUNC', 'O_WRONLY', 'P_DETACH', 'P_NOWAIT', 'P_NOWAITO', 'P_OVERLAY', 'P_WAIT', 'PathLike', 'R_OK', 'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'TMP_MAX', 'W_OK', 'X_OK', '_AddedDllDirectory', '_Environ', '__all__', '__builtins__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_methods', '_execvpe', '_exists', '_exit', '_fspath', '_get_exports_list', '_walk_symlinks_as_files', '_wrap_close', 'abc', 'abort', 'access', 'add_dll_directory', 'altsep', 'chdir', 'chmod', 'close', 'closerange', 'cpu_count', 'curdir', 'defpath', 'device_encoding', 'devnull', 'dup', 'dup2', 'environ', 'error', 'execl', 'execle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 'execvpe', 'extsep', 'fchmod', 'fdopen', 'fsdecode', 'fsencode', 'fspath', 'fstat', 'fsync', 'ftruncate', 'get_blocking', 'get_exec_path', 'get_handle_inheritable', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 'getenv', 'getlogin', 'getpid', 'getppid', 'isatty', 'kill', 'lchmod', 'linesep', 'link', 'listdir', 'listdrives', 'listmounts', 'listvolumes', 'lseek', 'lstat', 'makedirs', 'mkdir', 'name', 'open', 'pardir', 'path', 'pathsep', 'pipe', 'popen', 'process_cpu_count', 'putenv', 'read', 'readlink', 'remove', 'removedirs', 'rename', 'renames', 'replace', 'rmdir', 'scandir', 'sep', 'set_blocking', 'set_handle_inheritable', 'set_inheritable', 'spawnl', 'spawnle', 'spawnv', 'spawnve', 'st', 'startfile', 'stat', 'stat_result', 'statvfs_result', 'strerror', 'supports_bytes_environ', 'supports_dir_fd', 'supports_effective_ids', 'supports_fd', 'supports_follow_symlinks', 'symlink', 'sys', 'system', 'terminal_size', 'times', 'times_result', 'truncate', 'umask', 'uname_result', 'unlink', 'unsetenv', 'urandom', 'utime', 'waitpid', 'waitstatus_to_exitcode', 'walk', 'write']\n</code></pre></p> <p>Man kann sich auch den Hilfetext f\u00fcr eine einzelne Funktion ausgeben lassen:</p> <pre><code>&gt;&gt;&gt; print(os.listdir.__doc__)\nReturn a list containing the names of the files in the directory.\n\npath can be specified as either str, bytes, or a path-like object.  If path is bytes,\n  the filenames returned will also be bytes; in all other circumstances\n  the filenames returned will be str.\nIf path is None, uses the path='.'.\nOn some platforms, path may also be specified as an open file descriptor;\\\n  the file descriptor must refer to a directory.\n  If this functionality is unavailable, using it raises NotImplementedError.\n\nThe list is in arbitrary order.  It does not include the special\nentries '.' and '..' even if they are present in the directory.\n</code></pre>"},{"location":"workshop/tag1.html#modul-os","title":"Modul os","text":"<ul> <li>os.getcwd()   Gibt das aktuelle Arbeitsverzeichnis zur\u00fcck.</li> <li>os.mkdir(name)   Ordner erstellen \u00fcber relative|absolute Pfadangabe, falls   vorhanden wird ein FileExistsError geworfen.</li> <li>os.makedirs(name1/name2)   Ordner mit Unterordner(n) erzeugen.</li> <li>os.listdir(name)   Gibt eine Liste vom Verzeichnisinhalt zur\u00fcck, aber   ohne die Verzeichnisse . und ..</li> <li>os.walk(top)   Git das Tuple (dirpath, dirnames, filenames) zur\u00fcck.<ul> <li>dirpath   Ist der Pfad zum Verzeichnis</li> <li>dirnames   Liste mit allen Verzeichnisnamen</li> <li>filenames   Liste mit allen Dateinamen</li> </ul> </li> </ul>"},{"location":"workshop/tag1.html#submodul-ospath","title":"Submodul os.path","text":"<ul> <li>os.path   Arbeiten an Pfadnamen</li> <li>os.path.exists(datei)   Pr\u00fcft, ob die Datei vorhanden ist</li> <li>os.path.dirname(datei)   Gibt von einem Pfad den Ordnernamen zur\u00fcck</li> <li>os.path.basename(datei)   Gibt von einem Pfad den Dateinamen zur\u00fcck  </li> <li>file_name, file_extension = os.path.splitext(datei)   Spaltet den Pfadnamen in (root, ext) auf. </li> <li>os.path.join(verzeichnis, datei)   Einen Pfad zusammensetzen </li> <li>os.path.isdir()   Pr\u00fcft, ob der Pfad ein Verzeichnis ist.</li> <li>os.path.isfile()   Pr\u00fcft, ob der Pfad eine Datei ist.</li> <li>os.path.exists()   Pr\u00fcft, ob es den Pfad gibt</li> <li>os.path.expanduser('~')   Expandiert ~ zum Namen des Benutzerverzeichnisses</li> </ul>"},{"location":"workshop/tag1.html#beispiele","title":"Beispiele","text":""},{"location":"workshop/tag1.html#absoluten-pfad-ermitteln","title":"Absoluten Pfad ermitteln","text":"<pre><code>import os\n# Holt den Ordner, in dem das Skript liegt\n# Die Dunder-Variable __file__ enth\u00e4lt Pfad \n# zu der aktuellen Datei.\nskript_ordner = os.path.dirname(__file__)\n\n# Verbindet ihn mit dem Dateinamen\ndateipfad = os.path.join(skript_ordner, 'adressen.csv')\n</code></pre>"},{"location":"workshop/tag1.html#ospathjoin","title":"os.path.join()","text":"<p>Dateipfade betriebssystemgerecht zusammenzusetzen  (/ oder \\, je nach System)</p> <pre><code>import os\npfad = os.path.join(\"Ordner\", \"unterordner\", \"datei.txt\")\nprint(pfad)\n# Windows: \"Ordner\\unterordner\\datei.txt\"\n# macOS/Linux: \"Ordner/unterordner/datei.txt\"\n</code></pre>"},{"location":"workshop/tag1.html#alle-dateien-aus-ordner-auflisten","title":"Alle Dateien aus Ordner auflisten","text":"<pre><code>import os\nfor file in os.listdir('beispielordner'):\n    print(file)\n</code></pre>"},{"location":"workshop/tag1.html#weitere-beispiele","title":"Weitere Beispiele","text":"<ul> <li>dateien_auflisten1.py</li> <li>dateien_auflisten2.py</li> <li>verschachtelte_verzeichnisse.py</li> <li>ordner_erstellen.py</li> <li>groesste_datei.py</li> </ul>"},{"location":"workshop/tag1.html#modul-pathlib","title":"Modul pathlib","text":"<p>Das Modul pathlib erlaubt ein komfortables, betriebssystem\u00fcbergreifendes Arbeiten mit Datei- und Verzeichnisnamen - abstrahiert als Pfade (Path).</p> <p>Der Artikel Python's pathlib Module: Taming the File System enth\u00e4lt eine gute Einf\u00fchrung in die Nutzung des Moduls.</p>"},{"location":"workshop/tag1.html#beispiel-open","title":"Beispiel open","text":"<p>Eine Alternative zu  open ist Path.open.</p> <pre><code>from pathlib import Path\npath = Path('uebersicht_dateien.txt')\nwith path.open(mode = 'r', encoding=\"utf-8\") as f:\n    content = f.read()\nprint(content)\n</code></pre> <p>Oder k\u00fcrzer:</p> <pre><code>from pathlib import Path\npath = Path('uebersicht_dateien.txt')\ncontent = path.read_text(encoding=\"utf-8\")\nprint(content)\n</code></pre> <p>read_text k\u00fcmmert sich um das \u00d6ffnen und Schlie\u00dfen der  Datei, genau wie auch write_text.</p>"},{"location":"workshop/tag1.html#vergleich-ospathlib-funktionen","title":"Vergleich: os/pathlib Funktionen","text":"<p>In der Liste  Corresponding tools  findet man, welche Funktionen im Modul os welchen Funktionen im Modul pathlib entsprechen.</p>"},{"location":"workshop/tag1.html#beispiel","title":"Beispiel","text":"<p>Hier ein Beispiel, in dem der Inhalt eines Verzeichnisses mit der Funktion iterdir aufgelistet werden:</p> <ul> <li>pathlib_dateien_auflisten.py</li> </ul>"},{"location":"workshop/tag1.html#modul-shutil","title":"Modul shutil","text":"<p>Das Modul  shutil stelle eine Reihe von Highlevel Operationen zur Verf\u00fcgung um Dateien und Verzeichnisse zu kopieren, zu verschieben oder zu l\u00f6schen.</p> <ul> <li>shutil.copy(urspr,ziel)   Datei kopieren</li> <li>shutil.copytree(ursprOrdner,zielOrdner)   Ordner kopieren</li> <li>shutil.move(urspr,ziel)   Datei/Ordner verschieben (Achtung kann \u00fcberschreiben!)</li> <li>shutil.rmtree(path)   L\u00f6scht ein Verzeichnis samt allen Unterverzeichnissen</li> </ul> <p>Im Artikel  Shutil Module in Python findet man eine Reihe von Beispielen zur Nutzung des Moduls.</p>"},{"location":"workshop/tag1.html#modul-send2trash","title":"Modul send2trash","text":"<p>Das Modul send2trash  verschiebt zu l\u00f6schende Daten (Dateien/Verzeichnisse) in den Papierkorb.</p> <p>Achtung: Dieses Modul muss mit pip installiert werden.</p> <pre><code>from send2trash import send2trash\n# Verschiebe eine Datei/Verzeichnis in den Papierkorb\nsend2trash('some_file')\n\n# Verschiebe eine Liste von Dateien/Verzeichnissen in den Papierkorb\nsend2trash(['some_file1', 'some_file2'])\n</code></pre>"},{"location":"workshop/tag1.html#modul-sys","title":"Modul sys","text":"<ul> <li>bietet Zugriff auf Systemfunktionen und Interpreter   Informationen.</li> <li>verwenden f\u00fcr<ul> <li>mit dem Interpreter interagieren\u2013 Argumente aus der   Kommandozeile lesen</li> <li>das Skript vorzeitig beenden</li> <li>Informationen zu Pfaden, Modulen und Versionen erhalten</li> </ul> </li> </ul> Funktion/Attribut Beschreibung sys.argv Liste der Kommandozeilenargumente sys.exit() Skript/Programm beenden sys.version Gibt die Python Version zur\u00fcck sys.path Liste der Modul Suchpfade sys.stdin, sys.stdout, sys.stderr Zugriff auf die Ein-Ausgabestream"},{"location":"workshop/tag1.html#beispiel_1","title":"Beispiel","text":"<ul> <li>sys_beispiel.py</li> </ul>"},{"location":"workshop/tag2.html","title":"Tag 2 (10.07.2025)","text":""},{"location":"workshop/tag3.html","title":"Tag 3 (17.07.2025)","text":""},{"location":"blog/archiv/2025.html","title":"2025","text":""}]}
{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"MVHS Workshop: Python f\u00fcr Automatisierungs- und Scripting-Aufgaben","text":"<p>Auf dieser Site habe ich meine Daten zum Kurs  MVHS Workshop: Python f\u00fcr Automatisierungs- und Scripting-Aufgaben  abgelegt.</p> <p></p>"},{"location":"info.html","title":"Info","text":"<p>Infos \u00fcber diese Site.</p>"},{"location":"python.html","title":"Python","text":"<p>Infos zu verschiedenen Python Themen.</p>"},{"location":"workshop.html","title":"MVHS Workshop: Python f\u00fcr Automatisierungs- und Scripting-Aufgaben","text":""},{"location":"workshop.html#kursdaten","title":"Kursdaten","text":"Kurs MVHS Workshop: Python f\u00fcr Automatisierungs- und Scripting-Aufgaben Dozentin Dr. Florence Maurice"},{"location":"workshop.html#beschreibung","title":"Beschreibung","text":"<p>Vertiefen Sie Ihr Python-Wissen und wenden Sie diese F\u00e4higkeiten in praktischen kleine Projekten an. In diesem Kurs lernen Sie, wie Sie Python gezielt f\u00fcr Automatisierung und Scripting nutzen k\u00f6nnen. Sie entdecken, wie man allt\u00e4gliche Aufgaben wie das Verwalten von Dateien, das Extrahieren von Webdaten oder das Verarbeiten von CSV-Dateien effizient automatisiert.</p>"},{"location":"workshop.html#kursinhalte","title":"Kursinhalte","text":"<ul> <li>Dateimanipulation (Kopieren, Verschieben, Umbenennen)</li> <li>Ordnerstrukturen automatisieren</li> <li>Web-Scraping mit requests und BeautifulSoup</li> <li>Extraktion von Webdaten</li> <li>CSV-Dateien automatisiert bearbeiten</li> </ul> <p>Voraussetzung: Kenntnisse entsprechend dem MVHS Kurs \"Programmierung mit Python: Grundlagen\".</p>"},{"location":"workshop.html#kurstermine","title":"Kurstermine","text":"<ul> <li>Donnerstag 03.07.2025 18:00 \u2013 21:00 Uhr</li> <li>Donnerstag 10.07.2025 18:00 \u2013 21:00 Uhr</li> <li>Donnerstag 17.07.2025 18:00 \u2013 21:00 Uhr</li> </ul>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/2025/04/09/erste-version-zum-workshop-online.html","title":"Erste Version zum Workshop online","text":"<p>Die erste Version meiner Website zum MVHS Workshop ist jetzt online.</p> <p>Als Vorbereitung auf den MVHS Workshop habe ich mir diese Site angelegt. Hier werde ich Links zum Thema sammeln und meine Beispiele ablegen. </p>"},{"location":"info/about.html","title":"\u00dcber diese Site","text":"<p>Auf dieser Site habe ich meine Daten zum Kurs  MVHS Workshop: Python f\u00fcr Automatisierungs- und Scripting-Aufgaben  abgelegt.</p> <p>Der gesamte Inhalt dieser Site (HTML und Python Source Code) ist abgelegt in meinem GitHub Repository maroph/mvhs_python_automatisierung_scripting.</p> <p>Auf die Webseiten kann man \u00fcber die GitHub Page  maroph.github.io/mvhs_python_automatisierung_scripting zugreifen.</p> <p>Die Python Dateien sind im Verzeichnis  sources des Repositories abgelegt.</p> <p>Die Python Programme habe ich unter Debian 12 und Windows 11 getestet. </p> <p>Die verwendete Python Version kann man mit dem Programm version.py </p> <p>ausgeben.</p> <p>Debian 12.10 <pre><code>$ python3 version.py\n3.11.2 (main, Nov 30 2024, 21:22:50) [GCC 12.2.0]\nsys.version_info(major=3, minor=11, micro=2, releaselevel='final', serial=0)\nmajor        : 3\nminor        : 11\nmicro        : 2\nreleaselevel : final\nserial       : 0\n</code></pre></p> <p>Windows 11 24H2 <pre><code>&gt; python.exe version.py\n3.13.2 (tags/v3.13.2:4f8bb39, Feb  4 2025, 15:23:48) [MSC v.1942 64 bit (AMD64)]\nsys.version_info(major=3, minor=13, micro=2, releaselevel='final', serial=0)\nmajor        : 3\nminor        : 13\nmicro        : 2\nreleaselevel : final\nserial       : 0\n</code></pre></p>"},{"location":"info/about.html#struktur-des-repositories","title":"Struktur des Repositories","text":"<p>Im Branch  main  des Repositories befinden sich die folgenden Dateien und Verzeichnisse:</p> <ul> <li>.github/workflows/ci.yml   GitHub Actions Konfigurationsdatei.   Diese Konfigurationsdatei sorgt daf\u00fcr, dass bei   jedem commit im Branch main die HTML Seiten   neu erzeugt werden.</li> <li>docs   Markdown Sourcen dieser Site</li> <li>sources   Python Source Code</li> <li>LICENSE   Lizenz des Repositories (CC-BY 4.0)</li> <li>README.md   Readme Datei des Repositories</li> <li>build.bash   Linux build Skript.   Mit diesem Skript kann man lokal die HTML Seiten   erzeugen.</li> <li>mkdocs.yml MkDocs Konfigurationsdatei</li> </ul> <p>Die Webseiten aus den Markdown Dateien erzeuge ich mit dem MkDocs  Static Site Generator. Die erzeugten Webseiten  werden im Branch  gh-pages abgelegt.</p>"},{"location":"info/about.html#mein-python-virtual-environment","title":"Mein Python Virtual Environment","text":"<p>Zur Erzeugung der Webseiten verwende ich die  folgenden Python Module</p> <ul> <li>mkdocs-material   Das Modul mkdocs wird dabei mitinstalliert.</li> <li>mkdocs-git-revision-date-localized-plugin</li> </ul> <p>F\u00fcr die ben\u00f6tigten Python Module verwende ich das folgende Virtual Environment:</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\npython -m pip install --upgrade pip\npython -m pip install --upgrade setuptools\npython -m pip install --upgrade wheel\npython -m pip install mkdocs-material\npython -m pip install mkdocs-git-revision-date-localized-plugin\n</code></pre> <p>F\u00fcr die Kursbeispiele werden zus\u00e4tzlich die folgenden Python Module ben\u00f6tigt:</p> <ul> <li>beautifulsoup4</li> <li>requests</li> </ul> <pre><code>python -m pip install beautifulsoup4\npython -m pip install requests \n</code></pre> <p>Sollte das Modul pip und/oder venv nicht  installiert sein, muss man das entsprechende  Package installieren.</p> <p>Auf einem Debian System geht das mit dem folgenden Kommando</p> <pre><code>sudo apt install python3-pip\nsudo apt install python3-venv\n</code></pre> <ul> <li>Das Python favicon im Verzeichnis  assets ist von der Site favicon.cc</li> <li>Die Python Logo Datei ist eine verkleinerte Version der Datei  python-logo-only.png.</li> </ul>"},{"location":"info/gdpr.html","title":"GDPR / DSGVO","text":""},{"location":"info/gdpr.html#global-data-protection-regulation-gdpr","title":"Global Data Protection Regulation (GDPR)","text":"<p>This website does not collect, store or process personally identifiable  information (PII). This website does not require the use of cookies.</p>"},{"location":"info/gdpr.html#datenschutzerklarung-dsgvo","title":"Datenschutzerkl\u00e4rung (DSGVO)","text":"<p>Auf dieser Webseite werden keine personenbezogenen Daten erhoben, gespeichert  oder verarbeitet. Es werden keine Cookies verwendet.</p>"},{"location":"info/gdpr.html#third-part-inclusion","title":"Third Part Inclusion","text":"<p>This website is hosted by GitHub  using GitHub Pages. The GitHub Global Privacy Practices are available  here.</p>"},{"location":"info/gdpr.html#verweise-auf-dritte","title":"Verweise auf Dritte","text":"<p>Diese Website wird auf GitHub als GitHub Pages  gehostet. Die  GitHub Global Privacy Practices sind  hier  hinterlegt.</p>"},{"location":"info/license.html","title":"Lizenz","text":"<p> Die Texte und die meisten Programmierbeispiele  auf dieser Site sind lizenziert unter einer CC-BY 4.0 - Creative Commons Namensnennung 4.0 International Lizenz.</p> <p>Einige Programme sind lizenziert unter einer  MIT License. Bei diesen Programmen ist das jeweils am Anfang der Dateien vermerkt.</p>"},{"location":"python/dictionaries.html","title":"Dictionaries","text":"<p>Ein Dictionary speichert seinen Inhalt in Key/Value (Schl\u00fcssel/Wert) Paaren ab. Der Datentyp der Werte kann beliebig sein. \u00c4hnliches gilt f\u00fcr die Schl\u00fcssel, jedoch muss der Datentyp unver\u00e4nderbar sein (int, float, String, Tuple, ...). Der  Zugriff auf die Values erfolgt dabei \u00fcber den Key und nicht, wie bei Listen, \u00fcber einen Index.</p> <ul> <li>Die Datentypen f\u00fcr den Key m\u00fcssen hashable sein.</li> </ul> <p>Bis einschlie\u00dflich der Python Version 3.6 gab es  f\u00fcr die Key/Value Paare eines Dictionaries keine feste Reihenfolge. D.h.: hat man in einer for Schleife (Beispiele siehe weiter unten) \u00fcber die Keys eines Dictionaries iteriert, hing die Reihenfolge der Keys von der verwendeten Python Implementierung ab. Seit der Python Version 3.7 sind Dictionaries ordered, d.h. die Key/Value Paare werden in einer festen Reihenfolge ausgegeben. Die Reihenfolge richtet sich nach dem Zeitpunkt, zu dem sie in das Dictionary eingestellt wurden.</p>"},{"location":"python/dictionaries.html#anlegen-eines-dictionaries","title":"Anlegen eines Dictionaries","text":"<p>Man kann entweder ein leeres Dictionary anlegen</p> <pre><code>dict = {}\n## {}\n\noder\n\nd = dict()\n## {}\n</code></pre> <p>oder das Dictionary mit Inhalt anlegen</p> <pre><code>dict = {\n    \"key1\": \"val1\",\n    \"key2\": \"val2\"\n}\n## {'key1': 'val1', 'key2': 'val2'}\n</code></pre>"},{"location":"python/dictionaries.html#zugriff-auf-einen-wert-im-dictionary","title":"Zugriff auf einen Wert im Dictionary","text":"<p>Auf die Werte im Dictionary wird mit dem Schl\u00fcssel zugegriffen:</p> <pre><code>value = dict[key]\n\nvalue = dict[\"key1\"]\n## val1\n</code></pre> <p>Greift man auf einen Key zu, den es im Dictionary nicht gibt, wird ein KeyError geworfen. </p>"},{"location":"python/dictionaries.html#zugriff-auf-einen-wert-im-dictionary-auch-wenn-der-key-nicht-existiert","title":"Zugriff auf einen Wert im Dictionary - auch wenn der Key nicht existiert","text":"<pre><code>value = dict.get(key)\n</code></pre> <p>Ist der Key nicht im Dictionary, wird None zur\u00fcckgegeben.</p> <pre><code>value = dict.get(key, default_value)\n</code></pre> <p>Ist der Key nicht im Dictionary, wird der angegebene Defaultwert zur\u00fcckgegeben.</p>"},{"location":"python/dictionaries.html#default-dictionary","title":"Default Dictionary","text":"<p>Statt jedes Mal beim Aufruf von get einen Defaultwert mitzu\u00fcbergeben, kann man auch die Klasse  defaultdict verwenden.</p> <pre><code>from collections import defaultdict\n\ndef default_value():\n    return 0\n\ndict = {}\nd = defaultdict(default_value, dict)\nvalue = d.get(key)\n</code></pre> <p>Wir jetzt beim Aufruf von get ein Key verwendet, der nicht im Dictionary abgelegt ist, wird der Wert, den die Funktion default_value zur\u00fcckgibt (im Beispiel 0) zur\u00fcckgegeben.</p>"},{"location":"python/dictionaries.html#ein-keyvalue-paar-zum-dictionary-hinzufugen","title":"Ein Key/Value Paar zum Dictionary hinzuf\u00fcgen:","text":"<pre><code>dict[key] = value\n\ndict[\"key3\"] = \"val3\"\ndict\n## {'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}\n</code></pre>"},{"location":"python/dictionaries.html#ein-keyvalue-paar-auf-einem-dictionary-loschen","title":"Ein Key/Value Paar auf einem Dictionary l\u00f6schen","text":"<pre><code>del(dict[key])\noder \ndel dict[key]\n\ndel dict[\"key3\"]\ndict\n## {'key1': 'val1', 'key2': 'val2'}\n</code></pre> <p>Wird ein Key verwendet, des es im Dictionary nicht gibt, wird ein KeyError geworfen.</p>"},{"location":"python/dictionaries.html#loschen-und-lesen","title":"L\u00f6schen und lesen","text":"<pre><code>value = dict.pop(key)\n\nvalue = dict.pop(\"key2\")\n## val2\ndict\n## {'key1': 'val1'}\n</code></pre> <p>Greift man auf einen Key zu, den es im Dictionary nicht gibt, wird ein KeyError geworfen. </p> <p>Man kann abeim Auruf auch einen Defaultwert angeben, der zur\u00fcckgegeben wird, wenn der Key im Dictionary nicht gefunden wird</p> <pre><code>value = dict.pop(key, default_value)\n\nvalue = dict.pop(\"key42\", \"Don't Panic!\")\n## Don't Panic!\n</code></pre>"},{"location":"python/dictionaries.html#anzahl-der-keyvalue-paare-in-einem-dictionary","title":"Anzahl der Key/Value Paare in einem Dictionary","text":"<pre><code>len(dict)\n\ndict = { \"key1\": \"val1\", \"key2\": \"val2\" }\n## {'key1': 'val1', 'key2': 'val2'}\nlen(dict)\n## 2\n</code></pre>"},{"location":"python/dictionaries.html#abfragen-ob-ein-key-in-einem-dictionary-enthalten-ist","title":"Abfragen ob ein Key in einem Dictionary enthalten ist","text":"<pre><code>key1 in dict\n\nif \"key1\" in dict:\n    print(\"gefunden, Wert: \", dict[\"key1\"])\n</code></pre>"},{"location":"python/dictionaries.html#abfragen-ob-ein-key-nicht-in-einem-dictionary-enthalten-ist","title":"Abfragen ob ein Key nicht in einem Dictionary enthalten ist","text":"<pre><code>key1 not in dict\n\nif \"key1\" not in dict:\n    print(\"nicht gefunden\")\n</code></pre>"},{"location":"python/dictionaries.html#alle-keys-aus-einem-dictionary-lesen","title":"Alle Keys aus einem Dictionary lesen","text":"<pre><code>for key in dict:\n    print(key)\n</code></pre> <p>Oder</p> <pre><code>for key in dict.keys():\n    print(key)\n</code></pre>"},{"location":"python/dictionaries.html#alle-keys-aus-einem-dictionary-als-enumeration-lesen","title":"Alle Keys aus einem Dictionary als Enumeration lesen","text":"<pre><code>dict\n## {'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}\n\nlist(enumerate(dict))\n## [(0, 'key1'), (1, 'key2'), (2, 'key3')]  [(0, 'key1'), (1, 'key2'), (2, 'key3')]\n\nfor count, key in enumerate(dict):\n    print(f\"count: {count} , key: {key}\")\n\nAusgabe:\ncount: 0 , key: key1\ncount: 1 , key: key2\ncount: 2 , key: key3\n</code></pre> <p>Sieh auch: enumerate in der Python Dokumentation.</p>"},{"location":"python/dictionaries.html#alle-keys-in-einer-liste-speichern","title":"Alle Keys in einer Liste speichern","text":"<pre><code>liste = list(dict.keys())\n</code></pre>"},{"location":"python/dictionaries.html#abfragen-ob-ein-wert-in-einem-dictionary-enthalten-ist","title":"Abfragen ob ein Wert in einem Dictionary enthalten ist","text":"<pre><code>value in dict.values()\n\nif \"val1\" in dict.values():\n    print(\"gefunden\")\n</code></pre>"},{"location":"python/dictionaries.html#abfragen-ob-ein-wert-nicht-in-einem-dictionary-enthalten-ist","title":"Abfragen ob ein Wert nicht in einem Dictionary enthalten ist","text":"<pre><code>value not in dict.values()\n\nif \"val1\" not in dict.values():\n    print(\"nicht gefunden\")\n</code></pre>"},{"location":"python/dictionaries.html#alle-values-aus-einem-dictionary-lesen","title":"Alle Values aus einem Dictionary lesen","text":"<pre><code>for key in dict:\n    print(dict[key])\n</code></pre> <p>Oder </p> <pre><code>for value in dict.values():\n    print(value)\n</code></pre>"},{"location":"python/dictionaries.html#alle-values-in-einer-liste-speichern","title":"Alle Values in einer Liste speichern","text":"<pre><code>liste = list(dict.values())\n</code></pre>"},{"location":"python/dictionaries.html#alle-keyvalue-paare-aus-einem-dictionary-lesen","title":"Alle Key/Value Paare aus einem Dictionary lesen","text":""},{"location":"python/dictionaries.html#jedes-paar-als-tuple","title":"Jedes Paar als Tuple","text":"<pre><code>for item in dict.items():\n    print(item[0], item[1])\n</code></pre>"},{"location":"python/dictionaries.html#alles-paare-in-einer-liste-speichern","title":"Alles Paare in einer Liste speichern","text":"<pre><code>liste = list(dict.items())\n</code></pre>"},{"location":"python/dictionaries.html#jedes-paar-als-einzelne-werte-key-value","title":"Jedes Paar als einzelne Werte: key, value","text":"<pre><code>for key, value in dict.items():\n    print(key, value)\n</code></pre>"},{"location":"python/dictionaries.html#alle-keyvalue-paare-aus-einem-dictionary-als-enumeration-lesen","title":"Alle Key/Value Paare aus einem Dictionary als Enumeration lesen","text":"<pre><code>dict\n## {'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}\n\nfor count, (key, value) in enumerate(dict.items()):\n    print(f\"count: {count} , key: {key} , value: {value}\")\n\n\nAusgabe:\ncount: 0 , key: key1 , value: val1\ncount: 1 , key: key2 , value: val2\ncount: 2 , key: key3 , value: val3\n</code></pre> <p>Sieh auch: enumerate in der Python Dokumentation.</p>"},{"location":"python/dictionaries.html#inhalt-eines-dictionaries-loschen","title":"Inhalt eines Dictionaries l\u00f6schen","text":"<pre><code>dict.clear()\n</code></pre>"},{"location":"python/dictionaries.html#dictionary-kopieren","title":"Dictionary kopieren","text":"<pre><code>dict_copy = dict.copy()\n</code></pre> <p>Achtung: es wird eine sogenannte shallow copy erzeugt!</p> <p>D.h.: es werden die einzelnen Werte (Objekte) kopiert - genauer gesagt: es werden die Referenzen auf die Objekte kopiert. Ist ein Objekt mutable (ver\u00e4nderbar - z.B. eine Liste), dann f\u00fchrt eine \u00c4nderung an so einem Wert zu einer \u00c4nderungen im Original und in der Kopie. Sind alle Werte im Dictionary immutable (unver\u00e4nderbar), dann reicht diese Art der Kopie aus.</p> <p>Eine vollst\u00e4ndige Kopie kann man mit der Funktion deepcopy erzeugen Aufruf</p> <pre><code>import copy\ndict_copy = copy.deepcopy(dict)\n</code></pre>"},{"location":"python/dictionaries.html#einfugen-eines-dictionaries","title":"Einf\u00fcgen eines Dictionaries","text":"<pre><code>dict.update(dict2)\n</code></pre> <p>Alle Key/Value Paare aus dem Dictionary dict2 werden in das Dictionary dict eingef\u00fcgt. Ist der Key bereits in dict enthalten, wird der Wert durch den Wert aus dem Dictionary dict2 ersetzt.</p> <p>Alternativ kann man als Ergebnis auch ein neues  Dictionary anlegen:</p> <pre><code>dict_merge = { **dict1, **dict2 }\n</code></pre>"},{"location":"python/dictionaries.html#funktionen-als-werte-in-einem-dictionary","title":"Funktionen als Werte in einem Dictionary","text":"<p>Da Funktionen in Python auch Objekte sind, kann man Funktionen auch als Werte in einem Dictionary verwenden.</p> <p>Ein einfaches Beispiel hierzu ist in der Source  [dict_funcs.py]{:target=\"blank\"}</p> <p>abgelegt.</p>"},{"location":"python/dictionaries.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>Python-Kurs: Dictionaries</li> <li>Dictionaries in Python</li> <li>How to Iterate Through a Dictionary in Python</li> <li>Defaultdict in Python</li> <li>Python Dictionary Comprehensions: How and When to Use Them</li> <li>Python Dictionary Comprehensions: How and When to Use Them</li> </ul>"},{"location":"python/func_args.html","title":"Funktionsargumente","text":"<p>Oft werden in einer Funktionsdefinition alle Parameter angegeben, z.B.:</p> <pre><code>def func_sample(arg1, arg2, arg3):\n</code></pre> <p>Es gibt aber auch die M\u00f6glichkeit, eine  nicht festgelegte Anzahl von Parametern zu verwenden.</p> <p><pre><code>def func_sample(*args):\n</code></pre> Hier werden die Argumente als Tupel an die Funktion \u00fcbergeben.</p> <p><pre><code>def func_sample(**kwargs):\n</code></pre> In diesem Fall werden die Argumente als Dicitonary an die Funktion \u00fcbergeben.</p> <p>Ein Beispiel hierzu ist in der Source  func_arg_args_kwargs.py</p> <p>abgelegt.</p>"},{"location":"python/func_args.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>Python-Kurs: Funktionen</li> <li>Python Tips: args and *kwargs</li> </ul>"},{"location":"python/hashable.html","title":"Hashable","text":"<p>Die Objekte in einem Set und die Keys in einem Dictionary m\u00fcssen hashable sein. Deshalb die Frage: Was bedeutet  eigentlich hashable? </p> <p>Im  Python Glossary: hashable  findet man zum Thema Hashable den folgenden Eintrag:</p> <p>hashable An object is hashable if it has a hash value which  never changes during its lifetime (it needs a  hash() method), and can be compared to other  objects (it needs an eq() method). Hashable  objects which compare equal must have the same hash  value.</p> <p>Hashability makes an object usable as a dictionary  key and a set member, because these data structures  use the hash value internally.</p> <p>Most of Python\u2019s immutable built-in objects are  hashable; mutable containers (such as lists or  dictionaries) are not; immutable containers (such as  tuples and frozensets) are only hashable if their  elements are hashable. Objects which are instances  of user-defined classes are hashable by default. They all compare unequal (except with themselves), and their hash value is derived from their id().</p> <p>Fazit: soll eine eigene Klasse hashable sein,  m\u00fcssen die Methoden __eq__ und __hash__  geeignet implementiert werden.</p> <p>Hier eine Tabelle die zeigt, welche Python Operation  auf welche Methode einer Klasse delegiert werden:</p> Operation Dunder R\u00fcckgabewert a == b a.__eq__(b) True/False/NotImplemented hash(a) a.__hash__() int <p>Die Methode __eq__ gibt typischerweise einen von  den Werten True, False oder NotImplemented  (if objects can't be compared) zur\u00fcck. Die  Defaultimplementierung von __eq__ basiert auf dem  is Operator, der die Identity (Funktion id)  vergleicht.</p> <p>Die Defaultimplementierung von __ne__ ruft  __eq__ auf und negiert den boolschen R\u00fcckgabewert.  Hat __eq__ den R\u00fcckgabewert NotImplemented, wird  dieser auch von __ne__ zur\u00fcckgegeben.</p> <p>Bei einer eigenen Implementierung der Methoden  __eq__ und __hash__ ist folgendes zu beachten: </p> <pre><code>Ist a == b dann muss auch hash(a) == hash(b) sein\nIst hash(a) == hash(b) dann kann a == b oder a != b sein\nIst hash(a) != hash(b) dann muss auch a != b sein\n</code></pre>"},{"location":"python/hashable.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>Python Glossary: hashable</li> <li>Every dunder method in Python</li> <li>Hashing and Equality in Python</li> <li>What is \"hashable\" in Python?</li> <li>Overloading equality in Python</li> <li>Making hashable objects</li> </ul>"},{"location":"python/links.html","title":"Links","text":""},{"location":"python/links.html#python-allgemein","title":"Python Allgemein","text":"<ul> <li>Python Homepage</li> <li>Python Docs</li> <li>Python Language Reference</li> <li>Python Data model</li> <li>Python Built-in Types</li> <li>Python Built-in Functions</li> <li>Python Standard Library</li> <li>Python Styleguide</li> <li>Python Glossary</li> <li>PyPi - Python Package Index</li> <li>PIP - pip installs packages</li> <li>Python Source Code</li> <li>PyInstaller   Wandelt Python Anwendungen in ausf\u00fchrbare Programme um</li> <li>Pylint   Static code analyser for Python </li> </ul>"},{"location":"python/links.html#python-artikel","title":"Python Artikel","text":"<ul> <li>A Guide to Modern Python String Formatting Tools</li> <li>Build Your Python Project Documentation With MkDocs</li> <li>Bytes Objects: Handling Binary Data in Python</li> <li>Choose Your Path: Python\u2019s pathlib vs os.path</li> <li>Continuous Integration and Deployment for Python With GitHub Actions</li> <li>Dictionaries in Python</li> <li>Documenting Python Code: A Complete Guide</li> <li>Effective Python Testing With Pytest</li> <li>Every dunder method in Python</li> <li>For Loop vs. List Comprehension</li> <li>Garbage Collection in Python</li> <li>Getters and Setters: Manage Attributes in Python</li> <li>Getting Started With Testing in Python</li> <li>How to Join Strings in Python</li> <li>How to Replace a String in Python</li> <li>How to Remove Items From Lists in Python</li> <li>How to Round Numbers in Python</li> <li>How to Run Your Python Scripts and Code</li> <li>How to Sort Unicode Strings Alphabetically in Python</li> <li>How to Split a Python List or Iterable Into Chunks</li> <li>How to Strip Characters From a Python String</li> <li>How to Use sorted() and .sort() in Python</li> <li>How to Write Beautiful Python Code With PEP 8</li> <li>GUI Programming With PyQt</li> <li>Idiomatic Python: EAFP versus LBYL</li> <li>Image Processing With the Python Pillow Library</li> <li>Iterators and Iterables in Python: Run Efficient Iterations</li> <li>Logging in Python</li> <li>Object-Oriented Programming (OOP) in Python 3</li> <li>Pass by Reference in Python: Background and Best Practices</li> <li>Providing Multiple Constructors in Your Python Classes</li> <li>Primer on Python Decorators</li> <li>Python args and kwargs: Demystified</li> <li>Python Booleans: Use Truth Values in Your Code</li> <li>Python Concurrency: Threads, Processes, and asyncio Explained</li> <li>Python: create temporary files and directories in unittest</li> <li>Python Dictionary Comprehensions: How and When to Use Them</li> <li>Python Docstrings</li> <li>Python's F-String for String Interpolation and Formatting</li> <li>Python for Loops: The Pythonic Way</li> <li>Python Garbage Collection: What It Is and How It Works</li> <li>Python Set Comprehensions: How and When to Use Them</li> <li>Python's Bytearray: A Mutable Sequence of Bytes</li> <li>Python's Instance, Class, and Static Methods Demystified</li> <li>Python's Mutable vs Immutable Types: What's the Difference?</li> <li>Python's pathlib module</li> <li>Python's property(): Add Managed Attributes to Your Classes</li> <li>Python Scope &amp; the LEGB Rule: Resolving Names in Your Code</li> <li>Python Set Comprehensions: How and When to Use Them</li> <li>Python Stacks, Queues, and Priority Queues in Practice</li> <li>Python Timer Functions: Three Ways to Monitor Your Code</li> <li>Python while Loops: Repeating Tasks Conditionally</li> <li>regex101: regular expressions 101</li> <li>Should You Use Python pathlib or os?</li> <li>Speed Up Your Python Program With Concurrency</li> <li>Timing Functions With Decorators</li> <li> <p>Typangaben in Python</p> </li> <li> <p>Using Python's pip to Manage Your Projects' Dependencies</p> </li> <li>Using the Python zip() Function for Parallel Iteration</li> <li>Variables in Python: Usage and Best Practices</li> <li>What is \"hashable\" in Python?</li> <li>What Are Python Asterisk and Slash Special Parameters For?</li> <li>When to Use a List Comprehension in Python</li> <li>Working With Files in Python</li> </ul>"},{"location":"python/links.html#tutorialsbucher","title":"Tutorials/B\u00fccher","text":"<ul> <li>Dive Into Python 3</li> <li>Python 3 Tutorial</li> <li>Python 3 - Das umfassende Handbuch</li> <li>Python-Kurs <ul> <li>Python Tutorial</li> <li>Python und OOP</li> <li>Python Fortgeschritten</li> <li>Python Anwendungen</li> <li>Numerisches Programmieren mit Python</li> <li>Maschinelles Lernen mit Python</li> <li>Python Tkinter</li> </ul> </li> <li>Python Projekte</li> <li>Python Tips</li> <li>Real Python Tutorials</li> <li>SQLite Python</li> <li>The Python Tutorial</li> <li>The Python turtle Tutorial</li> </ul>"},{"location":"python/links.html#python-kurse","title":"Python Kurse","text":"<ul> <li>edX   Interaktive Kurse von Universit\u00e4ten wie Stanford, Harvard oder Berkeley.</li> <li>Coursera    Gro\u00dfe Auswahl an Kursen, die teilweise jederzeit belegbar sind.</li> <li>CodeAcademy   Viele weiterf\u00fchrende Kurse zu Themen wie Datenanalyse oder -visualisierung    in Python.</li> <li>OpenEDG   Kurse f\u00fcr HTML/CSS, Python, C, C++ und JavaScript.</li> <li>freeCodeCamp   Gro\u00dfe Anzahl von (nicht nur Python) Kursen.</li> <li>FutureLearn   Bietet eine Reihe von Python Kursen, die in der Regel f\u00fcr Anf\u00e4nger/Einsteiger    gedacht sind.</li> <li>udemy    Tutorialreihe zu ein- und weiterf\u00fchrenden Themen an.</li> <li>w3schools   Tutorialreihe zu ein- und weiterf\u00fchrenden Themen an.</li> </ul>"},{"location":"python/links.html#aufgabensammlungen","title":"Aufgabensammlungen","text":"<ul> <li>Advent of Code   \"Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like.\"</li> <li>Project Euler   \"Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve.\"    Siehe auch     Wikipedia: Project Euler</li> </ul>"},{"location":"python/links.html#ides","title":"IDEs","text":"<ul> <li>Eclipse PyDev</li> <li>Geany</li> <li>IDLE   Teil der Python Distribution</li> <li>PyCharm   Die Community Edition kann man kostenlos verwenden.</li> <li>Spyder</li> <li>Sublime Text 3</li> <li>Thonny</li> <li>Visual Studio Code</li> <li>VSCodium   Open Source Version von Visual Studio Code ohne    Microsoft Branding/Telemetry/Lizensierung</li> <li>Wing Python IDE </li> </ul>"},{"location":"python/links.html#online-ides","title":"Online IDEs","text":"<ul> <li>Cloud9 IDE</li> <li>Colaboratory</li> <li>Python Code Editor</li> <li>Python Fiddle</li> <li>Python Tutor</li> <li>Programiz</li> <li>Python on repl.it</li> </ul>"},{"location":"python/listen.html","title":"Listen","text":"<p>Eine Liste ist eine Sammlung von Elementen, die in einer festen Reihenfolge abgelegt werden. Der Datentyp der Elemente kann beliebig sein. Der Zugriff erfolgt  \u00fcber den Index, der die Position des Elements in der Liste bestimmt. Indizes  beginnen mit 0 und nicht mit 1!</p>"},{"location":"python/listen.html#anlegen-einer-liste","title":"Anlegen einer Liste","text":"<p>Man kann entweder ein leere Liste anlegen</p> <pre><code>liste = []\n## []\n\noder\n\nl = list()\n## []\n</code></pre> <p>oder eine Liste mit Inhalt anlegen</p> <pre><code>liste = [ \"val1\", \"val2\" ]\nliste = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\nliste = [i for i in range(1, 11)]\nliste = [ \"Don't Panic!\", 42, [ 3, 1, 4] ]\n</code></pre>"},{"location":"python/listen.html#anzahl-der-werte-in-einer-liste","title":"Anzahl der Werte in einer Liste","text":"<pre><code>len(liste)\n\nliste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlen(liste)\n## 10\n</code></pre>"},{"location":"python/listen.html#index-zugriff-auf-einen-wert-in-einer-liste","title":"Index-Zugriff auf einen Wert in einer Liste","text":"<p>Auf die Werte in einer Liste kann mit dem Index zugegriffen werden</p> <pre><code>liste = [ \"val1\", \"val2\" ]\n\nvalue1 = liste[0] # erstes Element\n## val1\nvalue2 = liste[1] # zweites Element\n## val2\n</code></pre>"},{"location":"python/listen.html#zugriff-auf-das-letztevorletzte-element-einer-liste","title":"Zugriff auf das letzte/vorletzte/... Element einer Liste","text":"<pre><code>liste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nvalue = liste[-1] # letztes Element\n## 10\nvalue = liste[-2] # vorletztes Element\n## 9\n...\n</code></pre>"},{"location":"python/listen.html#slicing","title":"Slicing","text":"<p>Man kann auch eine Liste mit einem zusammenh\u00e4ngenden Teil einer Liste erzeugen:</p> <pre><code>liste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nliste[0:5] # Elemente 0 bis 4 der Liste\n## [1, 2, 3, 4, 5]\n\nliste[6:] # Elemente 6 bis Ende\n## [7, 8, 9, 10]\n</code></pre>"},{"location":"python/listen.html#weiter-beispiele","title":"Weiter Beispiele","text":"<pre><code>liste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nliste[0]\n## 1\n\nliste[6]\n## 7\n\nliste[-1]\n## 10\n\nliste[-2]\n## 9\n\nliste[0:5]\n## [1, 2, 3, 4, 5]\n\nliste[6:]\n## [7, 8, 9, 10]\n\nliste[6:8]\n## [7, 8]\n\nliste[:2]\n## [1, 2]\n\nliste[3:-1]\n## [4, 5, 6, 7, 8, 9]\n\nliste[:-1]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>"},{"location":"python/listen.html#ein-wert-am-ende-der-liste-hinzufugen","title":"Ein Wert am Ende der Liste hinzuf\u00fcgen","text":"<pre><code>liste.append(value)\n\nliste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nliste.append(11)\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n</code></pre>"},{"location":"python/listen.html#einen-wert-in-eine-liste-einfugen","title":"Einen Wert in eine Liste einf\u00fcgen:","text":"<pre><code>liste.insert(idx, value)\n\nliste = [i for i in range(1, 11)]\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nliste.insert(3, 42)\n## [1, 2, 3, 42, 4, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"python/listen.html#erstes-auftreten-eines-wertes-aus-einer-liste-loschen","title":"Erstes Auftreten eines Wertes aus einer Liste l\u00f6schen","text":"<pre><code>liste.remove(value)\n\nliste\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3]\nliste.remove(3)\n## [1, 2, 4, 5, 6, 7, 8, 9, 10, 3]\n</code></pre>"},{"location":"python/listen.html#ein-wert-aus-einer-liste-loschen","title":"Ein Wert aus einer Liste l\u00f6schen","text":"<pre><code>del(liste[idx])\noder \ndel liste[idx]\n\nliste\n## [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]\ndel(liste[3])\nliste\n## [1, 2, 3, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"python/listen.html#letzten-wert-lesen-und-aus-der-liste-loschen","title":"Letzten Wert lesen und aus der Liste l\u00f6schen","text":"<pre><code>value = liste.pop()\n\nliste\n## [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]\nvalue = liste.pop()\n## [1, 2, 3, 4, 5, 6, 7, 8, 9]\nvalue\n## 10\n</code></pre>"},{"location":"python/listen.html#einen-wert-lesen-und-aus-der-liste-loschen","title":"Einen Wert lesen und aus der Liste l\u00f6schen","text":"<pre><code>value = liste.pop(idx)\n\nliste\n## [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]\nvalue = liste.pop(4)\n## [1, 2, 3, 4, 6, 7, 8, 9, 10]\nvalue\n## 5\n</code></pre>"},{"location":"python/listen.html#listenelemente-an-eine-liste-anhangen","title":"Listenelemente an eine Liste anh\u00e4ngen","text":"<pre><code>liste.extend(liste2)\n\nliste1\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nliste2\n## [11, 12, 13, 14, 15]\nliste.extend(liste2)\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nliste3 = liste1 + liste2\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n</code></pre>"},{"location":"python/listen.html#wie-oft-ist-ein-wert-in-einer-liste-enthalten","title":"Wie oft ist ein Wert in einer Liste enthalten","text":"<pre><code>liste.count(wert)\n\nliste\n## [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]\nliste.count(3)\n## 2\nliste.count(42)\n## 0\n</code></pre>"},{"location":"python/listen.html#erstes-auftreten-eines-wertes-in-einer-liste","title":"Erstes Auftreten eines Wertes in einer Liste","text":"<p>Sieh auch: Python List Index() Tutorial</p> <pre><code>idx = liste.index(value)\nidx = liste.index(value, start)\nidx = liste.index(value, start, stop)\n\nstart : Index, ab dem gesucht wird\nstop  : Es wird gesucht bis vor diesem Index\n\nliste\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3]\nidx = liste.index(3)\n## 2\n</code></pre> <p>Vorsicht: Wurde der Wert nicht in der Liste gefunden, wird ein ValueError geworfen</p> <pre><code>idx = liste.index(42)\n      ^^^^^^^^^^^^^^^\nValueError: 42 is not in list\n</code></pre>"},{"location":"python/listen.html#abfragen-ob-ein-wert-in-einer-liste-enthalten-ist","title":"Abfragen, ob ein Wert in einer Liste enthalten ist","text":"<pre><code>value in liste\n\nliste\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nif 3 in liste:\n    print(\"gefunden\")\n</code></pre>"},{"location":"python/listen.html#abfragen-ob-ein-wert-nicht-in-einer-liste-enthalten-ist","title":"Abfragen, ob ein Wert nicht in einer Liste enthalten ist","text":"<pre><code>value not in liste\n\nliste\n## [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nif 42 not in liste:\n    print(\"nicht gefunden\")\n</code></pre>"},{"location":"python/listen.html#alle-werte-aus-einer-liste-lesen","title":"Alle Werte aus einer Liste lesen","text":"<pre><code>for value in liste:\n    print(value)\n</code></pre>"},{"location":"python/listen.html#alle-werte-aus-einer-liste-als-enumeration-lesen","title":"Alle Werte aus einer Liste als Enumeration lesen","text":"<pre><code>liste\n## ['a', 'b', 'c']\n\nlist(enumerate(liste))\n## [(0, 'a'), (1, 'b'), (2, 'c')]\n\nfor count, obj in enumerate(liste):\n    print(f\"count: {count} , obj: {obj}\")\n\nAusgabe:\ncount: 0 , obj: a\ncount: 1 , obj: b\ncount: 2 , obj: c\n\nfor count, obj in enumerate(liste, start=42):\n    print(f\"count: {count} , obj: {obj}\")\n\nAusgabe:\ncount: 42 , obj: a\ncount: 43 , obj: b\ncount: 44 , obj: c\n</code></pre> <p>Sieh auch: enumerate in der Python Dokumentation.</p>"},{"location":"python/listen.html#inhalt-einer-liste-loschen","title":"Inhalt einer Liste l\u00f6schen","text":"<pre><code>liste.clear()\noder\ndel liste[:]\n</code></pre>"},{"location":"python/listen.html#umkehr-der-reihenfolge-in-einer-liste","title":"Umkehr der Reihenfolge in einer Liste","text":"<pre><code>liste.reverse()\n</code></pre>"},{"location":"python/listen.html#werte-in-einer-liste-sortieren","title":"Werte in einer Liste sortieren","text":"<pre><code>liste.sort()\n</code></pre> <p>Beim Aufruf von sort ist darauf zu achten, dass f\u00fcr alle Objekte (Werte) in der Liste das gleiche Sortierverfahren verwendet werden kann.</p> <p>Beispiel: die Liste enth\u00e4lt nur Zahlen oder nur Strings. Andernfalls wird ein TypeError geworfen:</p> <pre><code>## TypeError: \u2019&lt;\u2019 not supported between instances of \u2019str\u2019 and \u2019int\u2019\n</code></pre>"},{"location":"python/listen.html#sortierreihenfolge-umkehren","title":"Sortierreihenfolge umkehren","text":"<pre><code>liste.sort(reverse=True)\n</code></pre>"},{"location":"python/listen.html#liste-kopieren","title":"Liste kopieren","text":"<pre><code>liste2 = liste.copy()\noder\nliste2 = liste[:]\n</code></pre> <p>Achtung: es wird eine sogenannte shallow copy erzeugt!</p> <p>D.h.: es werden die einzelnen Eintr\u00e4ge (Objekte) kopiert - genauer gesagt: es werden die Referenzen auf die Objekte kopiert. Ist ein Objekt mutable (ver\u00e4nderbar - z.B. eine Liste), dann f\u00fchrt eine \u00c4nderung an so einem Wert zu einer \u00c4nderungen im Original und in der Kopie. Sind alle Werte in der Liste immutable (unver\u00e4nderbar), dann reicht diese Art der Kopie aus.</p> <p>Eine vollst\u00e4ndige Kopie kann man mit der Funktion deepcopy erzeugen Aufruf</p> <pre><code>import copy\nliste2 = copy.deepcopy(liste)\n</code></pre>"},{"location":"python/listen.html#prufen-ob-alle-listenelemente-vom-gleichen-datentyp-sind","title":"Pr\u00fcfen, ob alle Listenelemente vom gleichen Datentyp sind.","text":"<p>Im Beispiel wird gepr\u00fcft, ob alle Elemente in der Liste vom Datentyp str sind.</p> <pre><code>def is_list_of_strings(lst):\n    return lst and isinstance(lst, list) and all(isinstance(item, str) for item in lst)\n</code></pre>"},{"location":"python/listen.html#alle-werte-aus-einer-liste-lesen-und-loschen","title":"Alle Werte aus einer Liste lesen und l\u00f6schen","text":"<p>Mit dieser naheliegenden for Schleife l\u00e4sst sich das Problem leider nicht l\u00f6sen :-(</p> <pre><code>for value in liste:\n    print(value)\n    liste.pop(0)\n</code></pre> <p>Denn: es wird einerseits implizit ein Iterator benutzt, um alle Elemente der Liste  nacheinander zu bekommen und zum anderen wird direkt auf der Liste operiert.</p> <p>Man kann hierzu eine while Schleife verwenden:</p> <pre><code>while (len(liste) &gt; 0):\n    print(liste.pop(0))\n</code></pre> <p>Alternativ kann man auch die folgende for Schleife verwenden:</p> <pre><code>for _ in range(len(liste)):\n    print(liste.pop(0))\n</code></pre>"},{"location":"python/listen.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>Python Documentation: More on Lists</li> <li>Python Documentation: Built-in Function sorted</li> <li>Python Documentation: Sorting Techniques</li> <li>Python-Kurs: Listen</li> <li>Python's list Data Type: A Deep Dive With Examples</li> <li>When to Use a List Comprehension in Python</li> </ul>"},{"location":"python/sets.html","title":"Sets - Mengen","text":"<p>Ein Set ist eine Sammlung von Objekten. Diese  Sammlung ist</p> <ul> <li>ungeordnet</li> <li>unver\u00e4nderbar   Genauer: die einzelnen Objekte in einem Set    sollten nicht ver\u00e4ndert werden. Es k\u00f6nnen aber   neue Objekte hinzugef\u00fcgt werden oder aber    bereits vorhandene Objekte gel\u00f6scht werden.</li> <li>nicht indiziert</li> <li>Die Objekte im Set m\u00fcssen hashable   sein.</li> </ul> <p>Sets werden genutzt, um mehrere Objekte ein einer Variablen abzuspeichern. Dabei werden keine Duplikate zu einem Set hinzugef\u00fcgt.</p>"},{"location":"python/sets.html#anlegen-eines-sets","title":"Anlegen eines Sets","text":"<p>Man kann entweder ein leeres Set anlegen</p> <pre><code>myset = set()\n## set()\n</code></pre> <p>oder das Set mit Inhalt anlegen</p> <pre><code>myset = { \"item1\",\"item2\", \"item3\" }\n## {'item2', 'item1', 'item3'}\n</code></pre> <p>Hinweis: * Die Werte True und 1 werden in einem Set als ein   Wert betrachtet. Kommen beide vor, wird ein Wert als   Duplikat behandelt * Die Werte False und 0 werden in einem Set als ein   Wert betrachtet. Kommen beide vor, wird ein Wert als   Duplikat behandelt</p> <p>Beispiel</p> <pre><code>myset = { 0, 1, 2, True, False }\n## {0, 1, 2}\n</code></pre>"},{"location":"python/sets.html#lange-eines-sets","title":"L\u00e4nge eines Sets","text":"<pre><code>len(myset)\n\nmyset = { 1,2,3,4,5 }\n## {1, 2, 3, 4, 5}\n\nlen(myset)\n## 5\n</code></pre>"},{"location":"python/sets.html#zugriff-auf-ein-set","title":"Zugriff auf ein Set","text":"<pre><code>myset = { 1,2,3,4,5 }\n## {1, 2, 3, 4, 5}\n</code></pre>"},{"location":"python/sets.html#zugriff-auf-alle-objekte-in-einem-set","title":"Zugriff auf alle Objekte in einem Set","text":"<pre><code>for elem in myset:\n    print(elem)\n</code></pre>"},{"location":"python/sets.html#zugriff-auf-alle-objekte-in-einem-set-als-enumeration","title":"Zugriff auf alle Objekte in einem Set als Enumeration","text":"<pre><code>myset\n## {1, 2, 3, 4, 5}\n\nfor count, obj in enumerate(myset):\n    print(f\"count: {count} , obj: {obj}\")\n\nAusgabe:\ncount: 0 , obj: 1\ncount: 1 , obj: 2\ncount: 2 , obj: 3\ncount: 3 , obj: 4\ncount: 4 , obj: 5\n</code></pre> <p>Sieh auch: enumerate in der Python Dokumentation.</p>"},{"location":"python/sets.html#objekt-ist-in-einem-set","title":"Objekt ist in einem Set","text":"<pre><code>object in myset\n\nif 1 in myset:\n    print(\"in Set gefunden\")\n</code></pre>"},{"location":"python/sets.html#objekt-ist-nicht-in-einem-set","title":"Objekt ist nicht in einem Set","text":"<pre><code>object not in myset\n\nif 42 not in myset:\n    print(\"nicht in Set gefunden\")\n</code></pre>"},{"location":"python/sets.html#objekt-zu-einem-set-hinzufugen","title":"Objekt zu einem Set hinzuf\u00fcgen","text":"<pre><code>myset.add(6)\nmyset\n## {1, 2, 3, 4, 5, 6}\n</code></pre> <p>Ist ein Objekt bereits in einem Set vorhanden, wird das Set nicht ge\u00e4ndert</p> <pre><code>myset.add(1)\nmyset\n## {1, 2, 3, 4, 5}\n</code></pre>"},{"location":"python/sets.html#ein-set-zu-einem-set-hinzufugen","title":"Ein Set zu einem Set hinzuf\u00fcgen","text":"<pre><code>set1.update(set2)\n</code></pre> <p>Bereits vorhandene Objekte werden beim Update ignoriert</p> <pre><code>set1 = { 1,2,3,4,5 }\nset2 = { 3,4,5,6,7,8 }\nset1.update(set2)\nset1\n## {1, 2, 3, 4, 5, 6, 7, 8}\n</code></pre>"},{"location":"python/sets.html#ein-objekt-aus-einem-set-loschen","title":"Ein Objekt aus einem Set l\u00f6schen","text":"<pre><code>myset.remove(objekt)\n\nmyset\n## {1, 2, 3, 4, 5}\nmyset.remove(3)\nmyset\n## {1, 2, 4, 5}\n</code></pre> <p>Wird beim Aufruf von remove ein Objekt angegeben, das nicht im Set enthalten ist, wird ein KeyError geworfen.</p> <p>Alternativ kann man die Methode discard nutzen. Diese Methode wirft keinen KeyError, wenn das  Objekt nicht im Set enthalten ist</p> <pre><code>myset\n## {1, 2, 3, 4, 5}\nmyset.discard(42)\nmyset\n## {1, 2, 3, 4, 5}\n</code></pre> <p>F\u00fcr Sets gibt es auch die Methode pop.</p> <pre><code>objekt = myset.pop()\n</code></pre> <p>Da es auf Sets keinen Index gibt, wird mit dieser  Methode ein zuf\u00e4lliges Objekt aus dem Set gel\u00f6scht.  Die Methode gibt das gel\u00f6schte Objekt zur\u00fcck.</p>"},{"location":"python/sets.html#set-leeren","title":"Set leeren","text":"<pre><code>myset.clear()\n</code></pre>"},{"location":"python/sets.html#set-loschen","title":"Set l\u00f6schen","text":"<pre><code>del myset\n</code></pre>"},{"location":"python/sets.html#set-operationen","title":"Set Operationen","text":"<p>F\u00fcr die Beispiele werden die folgenden Sets  verwendet</p> <pre><code>set1 = { 1,2,3,4,5 }\n## {1, 2, 3, 4, 5} \nset2 = { 3,4,5,6,7,8 }\n## {3, 4, 5, 6, 7, 8}\n</code></pre>"},{"location":"python/sets.html#vereinigung","title":"Vereinigung","text":"<pre><code>s1 | s2\n## {1, 2, 3, 4, 5, 6, 7, 8}\n\ns3 = s1.union(s2)\ns3\n## {1, 2, 3, 4, 5, 6, 7, 8}\n</code></pre> <p>Man kann mit union auch mehrere Sets vereinigen</p> <pre><code>myset = set1.union(set2, set3, set4)\n</code></pre>"},{"location":"python/sets.html#schnitt","title":"Schnitt","text":"<pre><code>s1 &amp; s2\n## {3, 4, 5}\n</code></pre>"},{"location":"python/sets.html#differenz","title":"Differenz","text":"<p>In s1, nicht in s2</p> <pre><code>s1 - s2\n## {1, 2}\n</code></pre> <p>In s2, nicht in s1</p> <pre><code>s2 -s1\n## {8, 6, 7}\n</code></pre>"},{"location":"python/sets.html#frozenset","title":"frozenset","text":"<p>Set Objekte sind ver\u00e4nderbar. Mit Hilfe der Funktion frozenset werden Sets \"eingefroren\" und somit unver\u00e4nderbar.</p> <pre><code>myset = { 1, 2, 3, 'A', 'B', 'C' }\n## {'A', 1, 2, 3, 'B', 'C'}\n\nmyset_frozen = frozenset(myset)\n## frozenset({'A', 1, 2, 3, 'B', 'C'})\n\ntype(myset_frozen)\n## class 'frozenset'&gt;\n</code></pre>"},{"location":"python/sets.html#weiterfuhrende-links","title":"Weiterf\u00fchrende Links","text":"<ul> <li>w3schools: Python Sets</li> <li>Set Types - set, frozenset</li> <li>Hashable</li> <li>dataclasses \u2014 Data Classes</li> <li>w3schools: frozenset() Function</li> <li>Mengen managen \u00fcber: set und frozenset</li> <li>Python Set Comprehensions: How and When to Use Them</li> </ul>"},{"location":"python/tuples.html","title":"Tuples - Unver\u00e4nderliche Listen","text":"<p>Tuple verhalten sich genau wie Listen, aber ihr Inhalt kann nicht ver\u00e4ndert werden.</p>"},{"location":"python/tuples.html#anlegen-eines-tuple","title":"Anlegen eines Tuple","text":"<pre><code>tuple = (\"val1\", \"val2\")\n</code></pre>"},{"location":"python/tuples.html#leeres-tuple","title":"Leeres Tuple","text":"<pre><code>tuple = ()\n</code></pre>"},{"location":"python/tuples.html#tuple-mit-einem-element","title":"Tuple mit einem Element","text":"<pre><code>tuple = (\"val1\",)\n</code></pre>"},{"location":"python/tuples.html#zugriff-auf-einen-wert-in-einem-tuple","title":"Zugriff auf einen Wert in einem Tuple","text":"<p>Auf die Werte in einem Tuple wird mit dem Index zugegriffen:</p> <pre><code>value1 = tuple[0]\nvalue2 = tuple[1]\n</code></pre> <p>Achtung: der Index einer Liste f\u00e4ngt immer mit dem Wert 0 an.</p>"},{"location":"python/tuples.html#zugriff-auf-das-letztevorletzte-element-eines-tuple","title":"Zugriff auf das letzte/vorletzte Element eines Tuple:","text":"<pre><code>value = tuple[-1] # letztes Element\nvalue = tuple[-2] # vorletztes Element\n...\n</code></pre>"},{"location":"python/tuples.html#anzahl-der-werte-in-einem-tuple","title":"Anzahl der Werte in einem Tuple","text":"<pre><code>len(tuple)\n</code></pre>"},{"location":"python/tuples.html#abfragen-ob-ein-wert-in-einem-tuple-enthalten-ist","title":"Abfragen ob ein Wert in einem Tuple enthalten ist","text":"<pre><code>if \"val1\" in tuple:\n    print(\"gefunden\")\n</code></pre>"},{"location":"python/tuples.html#abfragen-ob-ein-wert-nicht-in-einem-tuple-enthalten-ist","title":"Abfragen ob ein Wert nicht in einem Tuple enthalten ist","text":"<pre><code>if \"val1\" not in tuple:\n    print(\"nicht gefunden\")\n</code></pre>"},{"location":"python/tuples.html#alle-werte-aus-einem-tuple-lesen","title":"Alle Werte aus einem Tuple lesen","text":"<pre><code>for value in tuple:\n    print(value)\n</code></pre> <p>Ein Tutorial zum Thema Tuple findet man hier:  Python's tuple Data Type: A Deep Dive With Examples</p>"},{"location":"workshop/links.html","title":"Links","text":""},{"location":"workshop/links.html#python","title":"Python","text":""},{"location":"workshop/links.html#alternativer-einstiegskurs","title":"Alternativer Einstiegskurs","text":"<p>Neben dem MVHS Kurs \"Programmierung mit Python: Grundlagen\" ist, meiner Meinung nach, der  openHPI Kurs Python \u2013 schnell und intensiv Programmieren lernen ein guter Einstiegskurs f\u00fcr diesen Workshop. Dieser Kurs kann jederzeit kostenlos im Selbststudium absolviert werden.</p>"},{"location":"workshop/links.html#python-ides","title":"Python IDEs","text":"<ul> <li>PyCharm Community Editon   Diese Version kann f\u00fcr private Projekte    kostenlos genutzt werden.</li> <li>Visual Studio Code   Dies d\u00fcrfte die am meisten genutzte IDE sein.</li> <li>VSCodium   Open Source Version von Visual Studio Code ohne    Microsoft Branding/Telemetry/Lizensierung.</li> </ul>"},{"location":"workshop/links.html#automation","title":"Automation","text":"<ul> <li>Automate the Boring Stuff with Python   Webseite zum gleichnamigen Buch.</li> </ul>"},{"location":"workshop/links.html#beautiful-soup","title":"Beautiful Soup","text":"<ul> <li>PyPi: beautifulsoup4</li> <li>Beautiful Soup: Homepage</li> </ul>"},{"location":"workshop/links.html#csv","title":"CSV","text":"<ul> <li>Python Doc: CSV File Reading and Writing</li> <li>Guide to Python's CSV Module</li> <li>Reading and Writing CSV Files in Python</li> </ul>"},{"location":"workshop/links.html#dateien-und-verzeichnisse","title":"Dateien und Verzeichnisse","text":"<ul> <li>Python's pathlib Module: Taming the File System</li> <li>Working With Files in Python</li> </ul>"},{"location":"workshop/links.html#requests","title":"Requests","text":"<ul> <li>PyPi: requests</li> <li>Requests</li> </ul>"},{"location":"workshop/tag1.html","title":"Tag 1 (03.07.2025)","text":""},{"location":"workshop/tag2.html","title":"Tag 2 (10.07.2025)","text":""},{"location":"workshop/tag3.html","title":"Tag 3 (17.07.2025)","text":""},{"location":"blog/archive/2025.html","title":"2025","text":""}]}